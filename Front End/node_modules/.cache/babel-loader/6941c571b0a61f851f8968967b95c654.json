{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst npm = {\n  os: require(`os`),\n  utils: require(`../utils`),\n  text: require(`../text`)\n};\n/**\r\n * @enum {number}\r\n * @alias errors.queryResultErrorCode\r\n * @readonly\r\n * @description\r\n * `queryResultErrorCode` enumerator, available from the {@link errors} namespace.\r\n *\r\n * Represents an integer code for each type of error supported by type {@link errors.QueryResultError}.\r\n *\r\n * @see {@link errors.QueryResultError}\r\n */\n\nconst queryResultErrorCode = {\n  /** No data returned from the query. */\n  noData: 0,\n\n  /** No return data was expected. */\n  notEmpty: 1,\n\n  /** Multiple rows were not expected. */\n  multiple: 2\n};\nconst errorMessages = [{\n  name: `noData`,\n  message: npm.text.noData\n}, {\n  name: `notEmpty`,\n  message: npm.text.notEmpty\n}, {\n  name: `multiple`,\n  message: npm.text.multiple\n}];\n/**\r\n * @class errors.QueryResultError\r\n * @augments external:Error\r\n * @description\r\n *\r\n * This error is specified as the rejection reason for all result-specific methods when the result doesn't match\r\n * the expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}.\r\n *\r\n * The error applies to the result from the following methods: {@link Database#none none},\r\n * {@link Database#one one}, {@link Database#oneOrNone oneOrNone} and {@link Database#many many}.\r\n *\r\n * Supported errors:\r\n *\r\n * - `No return data was expected.`, method {@link Database#none none}\r\n * - `No data returned from the query.`, methods {@link Database#one one} and {@link Database#many many}\r\n * - `Multiple rows were not expected.`, methods {@link Database#one one} and {@link Database#oneOrNone oneOrNone}\r\n *\r\n * Like any other error, this one is notified with through the global event {@link event:error error}.\r\n *\r\n * The type is available from the {@link errors} namespace.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryResultError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {object} result\r\n * The original $[Result] object that was received.\r\n *\r\n * @property {number} received\r\n * Total number of rows received. It is simply the value of `result.rows.length`.\r\n *\r\n * @property {number} code\r\n * Error code - {@link errors.queryResultErrorCode queryResultErrorCode} value.\r\n *\r\n * @property {string} query\r\n * Query that was executed.\r\n *\r\n * Normally, it is the query already formatted with values, if there were any.\r\n * But if you are using initialization option `pgFormatting`, then the query string is before formatting.\r\n *\r\n * @property {*} values\r\n * Values passed in as query parameters. Available only when initialization option `pgFormatting` is used.\r\n * Otherwise, the values are within the pre-formatted `query` string.\r\n *\r\n * @example\r\n *\r\n * const QueryResultError = pgp.errors.QueryResultError;\r\n * const qrec = pgp.errors.queryResultErrorCode;\r\n *\r\n * const initOptions = {\r\n *\r\n *   // pg-promise initialization options...\r\n *\r\n *   error: (err, e) => {\r\n *       if (err instanceof QueryResultError) {\r\n *           // A query returned unexpected number of records, and thus rejected;\r\n *           \r\n *           // we can check the error code, if we want specifics:\r\n *           if(err.code === qrec.noData) {\r\n *               // expected some data, but received none;\r\n *           }\r\n *\r\n *           // If you write QueryResultError into the console,\r\n *           // you will get a nicely formatted output.\r\n *\r\n *           console.log(err);\r\n *           \r\n *           // See also: err, e.query, e.params, etc.\r\n *       }\r\n *   }\r\n * };\r\n *\r\n * @see\r\n * {@link queryResult}, {@link Database#none none}, {@link Database#one one},\r\n * {@link Database#oneOrNone oneOrNone}, {@link Database#many many}\r\n *\r\n */\n\nclass QueryResultError extends Error {\n  constructor(code, result, query, values) {\n    const message = errorMessages[code].message;\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.result = result;\n    this.query = query;\n    this.values = values;\n    this.received = result.rows.length;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n/**\r\n * @method errors.QueryResultError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\n\n\nQueryResultError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap0 = npm.utils.messageGap(level),\n        gap1 = npm.utils.messageGap(level + 1),\n        lines = [`QueryResultError {`, gap1 + `code: queryResultErrorCode.` + errorMessages[this.code].name, gap1 + `message: \"` + this.message + `\"`, gap1 + `received: ` + this.received, gap1 + `query: ` + (typeof this.query === `string` ? `\"` + this.query + `\"` : npm.utils.toJson(this.query))];\n\n  if (this.values !== undefined) {\n    lines.push(gap1 + `values: ` + npm.utils.toJson(this.values));\n  }\n\n  lines.push(gap0 + `}`);\n  return lines.join(npm.os.EOL);\n};\n\nnpm.utils.addInspection(QueryResultError, function () {\n  return this.toString();\n});\nmodule.exports = {\n  QueryResultError,\n  queryResultErrorCode\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/errors/query-result-error.js"],"names":["npm","os","require","utils","text","queryResultErrorCode","noData","notEmpty","multiple","errorMessages","name","message","QueryResultError","Error","constructor","code","result","query","values","received","rows","length","captureStackTrace","prototype","toString","level","parseInt","gap0","messageGap","gap1","lines","toJson","undefined","push","join","EOL","addInspection","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst npm = {\r\n    os: require(`os`),\r\n    utils: require(`../utils`),\r\n    text: require(`../text`)\r\n};\r\n\r\n/**\r\n * @enum {number}\r\n * @alias errors.queryResultErrorCode\r\n * @readonly\r\n * @description\r\n * `queryResultErrorCode` enumerator, available from the {@link errors} namespace.\r\n *\r\n * Represents an integer code for each type of error supported by type {@link errors.QueryResultError}.\r\n *\r\n * @see {@link errors.QueryResultError}\r\n */\r\nconst queryResultErrorCode = {\r\n    /** No data returned from the query. */\r\n    noData: 0,\r\n\r\n    /** No return data was expected. */\r\n    notEmpty: 1,\r\n\r\n    /** Multiple rows were not expected. */\r\n    multiple: 2\r\n};\r\n\r\nconst errorMessages = [\r\n    {name: `noData`, message: npm.text.noData},\r\n    {name: `notEmpty`, message: npm.text.notEmpty},\r\n    {name: `multiple`, message: npm.text.multiple}\r\n];\r\n\r\n/**\r\n * @class errors.QueryResultError\r\n * @augments external:Error\r\n * @description\r\n *\r\n * This error is specified as the rejection reason for all result-specific methods when the result doesn't match\r\n * the expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}.\r\n *\r\n * The error applies to the result from the following methods: {@link Database#none none},\r\n * {@link Database#one one}, {@link Database#oneOrNone oneOrNone} and {@link Database#many many}.\r\n *\r\n * Supported errors:\r\n *\r\n * - `No return data was expected.`, method {@link Database#none none}\r\n * - `No data returned from the query.`, methods {@link Database#one one} and {@link Database#many many}\r\n * - `Multiple rows were not expected.`, methods {@link Database#one one} and {@link Database#oneOrNone oneOrNone}\r\n *\r\n * Like any other error, this one is notified with through the global event {@link event:error error}.\r\n *\r\n * The type is available from the {@link errors} namespace.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryResultError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {object} result\r\n * The original $[Result] object that was received.\r\n *\r\n * @property {number} received\r\n * Total number of rows received. It is simply the value of `result.rows.length`.\r\n *\r\n * @property {number} code\r\n * Error code - {@link errors.queryResultErrorCode queryResultErrorCode} value.\r\n *\r\n * @property {string} query\r\n * Query that was executed.\r\n *\r\n * Normally, it is the query already formatted with values, if there were any.\r\n * But if you are using initialization option `pgFormatting`, then the query string is before formatting.\r\n *\r\n * @property {*} values\r\n * Values passed in as query parameters. Available only when initialization option `pgFormatting` is used.\r\n * Otherwise, the values are within the pre-formatted `query` string.\r\n *\r\n * @example\r\n *\r\n * const QueryResultError = pgp.errors.QueryResultError;\r\n * const qrec = pgp.errors.queryResultErrorCode;\r\n *\r\n * const initOptions = {\r\n *\r\n *   // pg-promise initialization options...\r\n *\r\n *   error: (err, e) => {\r\n *       if (err instanceof QueryResultError) {\r\n *           // A query returned unexpected number of records, and thus rejected;\r\n *           \r\n *           // we can check the error code, if we want specifics:\r\n *           if(err.code === qrec.noData) {\r\n *               // expected some data, but received none;\r\n *           }\r\n *\r\n *           // If you write QueryResultError into the console,\r\n *           // you will get a nicely formatted output.\r\n *\r\n *           console.log(err);\r\n *           \r\n *           // See also: err, e.query, e.params, etc.\r\n *       }\r\n *   }\r\n * };\r\n *\r\n * @see\r\n * {@link queryResult}, {@link Database#none none}, {@link Database#one one},\r\n * {@link Database#oneOrNone oneOrNone}, {@link Database#many many}\r\n *\r\n */\r\nclass QueryResultError extends Error {\r\n    constructor(code, result, query, values) {\r\n        const message = errorMessages[code].message;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        this.code = code;\r\n        this.result = result;\r\n        this.query = query;\r\n        this.values = values;\r\n        this.received = result.rows.length;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n/**\r\n * @method errors.QueryResultError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryResultError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            `QueryResultError {`,\r\n            gap1 + `code: queryResultErrorCode.` + errorMessages[this.code].name,\r\n            gap1 + `message: \"` + this.message + `\"`,\r\n            gap1 + `received: ` + this.received,\r\n            gap1 + `query: ` + (typeof this.query === `string` ? `\"` + this.query + `\"` : npm.utils.toJson(this.query))\r\n        ];\r\n    if (this.values !== undefined) {\r\n        lines.push(gap1 + `values: ` + npm.utils.toJson(this.values));\r\n    }\r\n    lines.push(gap0 + `}`);\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(QueryResultError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {\r\n    QueryResultError,\r\n    queryResultErrorCode\r\n};\r\n"]},"metadata":{},"sourceType":"script"}