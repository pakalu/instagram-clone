{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst npm = {\n  os: require(`os`),\n  utils: require(`../utils`),\n  minify: require(`pg-minify`)\n};\n/**\r\n * @class errors.QueryFileError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.QueryFileError QueryFileError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors related to {@link QueryFile}.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryFileError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {string} file\r\n * File path/name that was passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {object} options\r\n * Set of options that was used by the {@link QueryFile} object.\r\n *\r\n * @property {SQLParsingError} error\r\n * Internal $[SQLParsingError] object.\r\n *\r\n * It is set only when the error was thrown by $[pg-minify] while parsing the SQL file.\r\n *\r\n * @see QueryFile\r\n *\r\n */\n\nclass QueryFileError extends Error {\n  constructor(error, qf) {\n    const isSqlError = error instanceof npm.minify.SQLParsingError;\n    const message = isSqlError ? `Failed to parse the SQL.` : error.message;\n    super(message);\n    this.name = this.constructor.name;\n\n    if (isSqlError) {\n      this.error = error;\n    }\n\n    this.file = qf.file;\n    this.options = qf.options;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n/**\r\n * @method errors.QueryFileError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\n\n\nQueryFileError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap0 = npm.utils.messageGap(level),\n        gap1 = npm.utils.messageGap(level + 1),\n        lines = [`QueryFileError {`, gap1 + `message: \"` + this.message + `\"`, gap1 + `options: ` + npm.utils.toJson(this.options), gap1 + `file: \"` + this.file + `\"`];\n\n  if (this.error) {\n    lines.push(gap1 + `error: ` + this.error.toString(level + 1));\n  }\n\n  lines.push(gap0 + `}`);\n  return lines.join(npm.os.EOL);\n};\n\nnpm.utils.addInspection(QueryFileError, function () {\n  return this.toString();\n});\nmodule.exports = {\n  QueryFileError\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/errors/query-file-error.js"],"names":["npm","os","require","utils","minify","QueryFileError","Error","constructor","error","qf","isSqlError","SQLParsingError","message","name","file","options","captureStackTrace","prototype","toString","level","parseInt","gap0","messageGap","gap1","lines","toJson","push","join","EOL","addInspection","module","exports"],"mappings":"AAAA;;;;;;;;AASA,MAAMA,GAAG,GAAG;AACRC,EAAAA,EAAE,EAAEC,OAAO,CAAE,IAAF,CADH;AAERC,EAAAA,KAAK,EAAED,OAAO,CAAE,UAAF,CAFN;AAGRE,EAAAA,MAAM,EAAEF,OAAO,CAAE,WAAF;AAHP,CAAZ;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,MAAMG,cAAN,SAA6BC,KAA7B,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQC,EAAR,EAAY;AACnB,UAAMC,UAAU,GAAGF,KAAK,YAAYR,GAAG,CAACI,MAAJ,CAAWO,eAA/C;AACA,UAAMC,OAAO,GAAGF,UAAU,GAAI,0BAAJ,GAAgCF,KAAK,CAACI,OAAhE;AACA,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,KAAKN,WAAL,CAAiBM,IAA7B;;AACA,QAAIH,UAAJ,EAAgB;AACZ,WAAKF,KAAL,GAAaA,KAAb;AACH;;AACD,SAAKM,IAAL,GAAYL,EAAE,CAACK,IAAf;AACA,SAAKC,OAAL,GAAeN,EAAE,CAACM,OAAlB;AACAT,IAAAA,KAAK,CAACU,iBAAN,CAAwB,IAAxB,EAA8B,KAAKT,WAAnC;AACH;;AAZ8B;AAenC;;;;;;;;;;;;;;AAYAF,cAAc,CAACY,SAAf,CAAyBC,QAAzB,GAAoC,UAAUC,KAAV,EAAiB;AACjDA,EAAAA,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAYC,QAAQ,CAACD,KAAD,CAApB,GAA8B,CAAtC;AACA,QAAME,IAAI,GAAGrB,GAAG,CAACG,KAAJ,CAAUmB,UAAV,CAAqBH,KAArB,CAAb;AAAA,QACII,IAAI,GAAGvB,GAAG,CAACG,KAAJ,CAAUmB,UAAV,CAAqBH,KAAK,GAAG,CAA7B,CADX;AAAA,QAEIK,KAAK,GAAG,CACH,kBADG,EAEJD,IAAI,GAAI,YAAR,GAAsB,KAAKX,OAA3B,GAAsC,GAFlC,EAGJW,IAAI,GAAI,WAAR,GAAqBvB,GAAG,CAACG,KAAJ,CAAUsB,MAAV,CAAiB,KAAKV,OAAtB,CAHjB,EAIJQ,IAAI,GAAI,SAAR,GAAmB,KAAKT,IAAxB,GAAgC,GAJ5B,CAFZ;;AAQA,MAAI,KAAKN,KAAT,EAAgB;AACZgB,IAAAA,KAAK,CAACE,IAAN,CAAWH,IAAI,GAAI,SAAR,GAAmB,KAAKf,KAAL,CAAWU,QAAX,CAAoBC,KAAK,GAAG,CAA5B,CAA9B;AACH;;AACDK,EAAAA,KAAK,CAACE,IAAN,CAAWL,IAAI,GAAI,GAAnB;AACA,SAAOG,KAAK,CAACG,IAAN,CAAW3B,GAAG,CAACC,EAAJ,CAAO2B,GAAlB,CAAP;AACH,CAfD;;AAiBA5B,GAAG,CAACG,KAAJ,CAAU0B,aAAV,CAAwBxB,cAAxB,EAAwC,YAAY;AAChD,SAAO,KAAKa,QAAL,EAAP;AACH,CAFD;AAIAY,MAAM,CAACC,OAAP,GAAiB;AAAC1B,EAAAA;AAAD,CAAjB","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst npm = {\r\n    os: require(`os`),\r\n    utils: require(`../utils`),\r\n    minify: require(`pg-minify`)\r\n};\r\n\r\n/**\r\n * @class errors.QueryFileError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.QueryFileError QueryFileError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors related to {@link QueryFile}.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryFileError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {string} file\r\n * File path/name that was passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {object} options\r\n * Set of options that was used by the {@link QueryFile} object.\r\n *\r\n * @property {SQLParsingError} error\r\n * Internal $[SQLParsingError] object.\r\n *\r\n * It is set only when the error was thrown by $[pg-minify] while parsing the SQL file.\r\n *\r\n * @see QueryFile\r\n *\r\n */\r\nclass QueryFileError extends Error {\r\n    constructor(error, qf) {\r\n        const isSqlError = error instanceof npm.minify.SQLParsingError;\r\n        const message = isSqlError ? `Failed to parse the SQL.` : error.message;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        if (isSqlError) {\r\n            this.error = error;\r\n        }\r\n        this.file = qf.file;\r\n        this.options = qf.options;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n/**\r\n * @method errors.QueryFileError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryFileError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            `QueryFileError {`,\r\n            gap1 + `message: \"` + this.message + `\"`,\r\n            gap1 + `options: ` + npm.utils.toJson(this.options),\r\n            gap1 + `file: \"` + this.file + `\"`\r\n        ];\r\n    if (this.error) {\r\n        lines.push(gap1 + `error: ` + this.error.toString(level + 1));\r\n    }\r\n    lines.push(gap0 + `}`);\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(QueryFileError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {QueryFileError};\r\n"]},"metadata":{},"sourceType":"script"}