{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  ColumnSet\n} = require(`../column-set`);\n\nconst npm = {\n  format: require(`../../formatting`).as.format,\n  utils: require(`../../utils`)\n};\n/**\r\n * @method helpers.sets\r\n * @description\r\n * Generates a string of comma-separated value-set statements from a single object: `col1=val1, col2=val2, ...`,\r\n * to be used as part of a query.\r\n *\r\n * Since it is to be used as part of `UPDATE` queries, {@link helpers.Column Column} properties `cnd` and `skip` apply.\r\n *\r\n * @param {object} data\r\n * A simple, non-null and non-array source object.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to set values.\r\n *\r\n * When not specified, properties of the `data` object are used.\r\n *\r\n * When no effective columns are found, an empty string is returned.\r\n *\r\n * @returns {string}\r\n * - comma-separated value-set statements for the `data` object\r\n * - an empty string, if no effective columns found\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const data = {id: 1, val: 123, msg: 'hello'};\r\n *\r\n * // Properties can be pulled automatically from the object:\r\n *\r\n * pgp.helpers.sets(data);\r\n * //=> \"id\"=1,\"val\"=123,\"msg\"='hello'\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance);\r\n * // NOTE: Conditional columns (start with '?') are skipped:\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id','val', 'msg']);\r\n *\r\n * pgp.helpers.sets(data, cs);\r\n * //=> \"val\"=123,\"msg\"='hello'\r\n *\r\n */\n\nfunction sets(data, columns, capSQL) {\n  if (!data || typeof data !== `object` || Array.isArray(data)) {\n    throw new TypeError(`Invalid parameter 'data' specified.`);\n  }\n\n  if (!(columns instanceof ColumnSet)) {\n    columns = new ColumnSet(columns || data);\n  }\n\n  return npm.format(columns.assign({\n    source: data\n  }), columns.prepare(data), {\n    capSQL\n  });\n}\n\nmodule.exports = {\n  sets\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/helpers/methods/sets.js"],"names":["ColumnSet","require","npm","format","as","utils","sets","data","columns","capSQL","Array","isArray","TypeError","assign","source","prepare","module","exports"],"mappings":"AAAA;;;;;;;;AASA,MAAM;AAACA,EAAAA;AAAD,IAAcC,OAAO,CAAE,eAAF,CAA3B;;AAEA,MAAMC,GAAG,GAAG;AACRC,EAAAA,MAAM,EAAEF,OAAO,CAAE,kBAAF,CAAP,CAA4BG,EAA5B,CAA+BD,MAD/B;AAERE,EAAAA,KAAK,EAAEJ,OAAO,CAAE,aAAF;AAFN,CAAZ;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,SAASK,IAAT,CAAcC,IAAd,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqC;AAEjC,MAAI,CAACF,IAAD,IAAS,OAAOA,IAAP,KAAiB,QAA1B,IAAqCG,KAAK,CAACC,OAAN,CAAcJ,IAAd,CAAzC,EAA8D;AAC1D,UAAM,IAAIK,SAAJ,CAAe,qCAAf,CAAN;AACH;;AAED,MAAI,EAAEJ,OAAO,YAAYR,SAArB,CAAJ,EAAqC;AACjCQ,IAAAA,OAAO,GAAG,IAAIR,SAAJ,CAAcQ,OAAO,IAAID,IAAzB,CAAV;AACH;;AAED,SAAOL,GAAG,CAACC,MAAJ,CAAWK,OAAO,CAACK,MAAR,CAAe;AAACC,IAAAA,MAAM,EAAEP;AAAT,GAAf,CAAX,EAA2CC,OAAO,CAACO,OAAR,CAAgBR,IAAhB,CAA3C,EAAkE;AAACE,IAAAA;AAAD,GAAlE,CAAP;AACH;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AAACX,EAAAA;AAAD,CAAjB","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ColumnSet} = require(`../column-set`);\r\n\r\nconst npm = {\r\n    format: require(`../../formatting`).as.format,\r\n    utils: require(`../../utils`)\r\n};\r\n\r\n/**\r\n * @method helpers.sets\r\n * @description\r\n * Generates a string of comma-separated value-set statements from a single object: `col1=val1, col2=val2, ...`,\r\n * to be used as part of a query.\r\n *\r\n * Since it is to be used as part of `UPDATE` queries, {@link helpers.Column Column} properties `cnd` and `skip` apply.\r\n *\r\n * @param {object} data\r\n * A simple, non-null and non-array source object.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to set values.\r\n *\r\n * When not specified, properties of the `data` object are used.\r\n *\r\n * When no effective columns are found, an empty string is returned.\r\n *\r\n * @returns {string}\r\n * - comma-separated value-set statements for the `data` object\r\n * - an empty string, if no effective columns found\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')();\r\n *\r\n * const data = {id: 1, val: 123, msg: 'hello'};\r\n *\r\n * // Properties can be pulled automatically from the object:\r\n *\r\n * pgp.helpers.sets(data);\r\n * //=> \"id\"=1,\"val\"=123,\"msg\"='hello'\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance);\r\n * // NOTE: Conditional columns (start with '?') are skipped:\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['?id','val', 'msg']);\r\n *\r\n * pgp.helpers.sets(data, cs);\r\n * //=> \"val\"=123,\"msg\"='hello'\r\n *\r\n */\r\nfunction sets(data, columns, capSQL) {\r\n\r\n    if (!data || typeof data !== `object` || Array.isArray(data)) {\r\n        throw new TypeError(`Invalid parameter 'data' specified.`);\r\n    }\r\n\r\n    if (!(columns instanceof ColumnSet)) {\r\n        columns = new ColumnSet(columns || data);\r\n    }\r\n\r\n    return npm.format(columns.assign({source: data}), columns.prepare(data), {capSQL});\r\n}\r\n\r\nmodule.exports = {sets};\r\n"]},"metadata":{},"sourceType":"script"}