{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  Column\n} = require(`./column`);\n\nconst {\n  ColumnSet\n} = require(`./column-set`);\n\nconst {\n  TableName\n} = require(`./table-name`);\n\nconst method = require(`./methods`);\n\nconst utils = require(`../utils`);\n/**\r\n * @namespace helpers\r\n * @description\r\n * Namespace for query-formatting generators, available as {@link module:pg-promise~helpers pgp.helpers}, after initializing the library.\r\n *\r\n * It unifies the approach to generating multi-row `INSERT` / `UPDATE` queries with the single-row ones.\r\n *\r\n * See also: $[Performance Boost].\r\n *\r\n * @property {function} TableName\r\n * {@link helpers.TableName TableName} class constructor.\r\n *\r\n * @property {function} ColumnSet\r\n * {@link helpers.ColumnSet ColumnSet} class constructor.\r\n *\r\n * @property {function} Column\r\n * {@link helpers.Column Column} class constructor.\r\n *\r\n * @property {function} insert\r\n * {@link helpers.insert insert} static method.\r\n *\r\n * @property {function} update\r\n * {@link helpers.update update} static method.\r\n *\r\n * @property {function} values\r\n * {@link helpers.values values} static method.\r\n *\r\n * @property {function} sets\r\n * {@link helpers.sets sets} static method.\r\n *\r\n * @property {function} concat\r\n * {@link helpers.concat concat} static method.\r\n */\n\n\nmodule.exports = config => {\n  const capSQL = () => config.options && config.options.capSQL;\n\n  const res = {\n    insert(data, columns, table) {\n      return method.insert(data, columns, table, capSQL());\n    },\n\n    update(data, columns, table, options) {\n      return method.update(data, columns, table, options, capSQL());\n    },\n\n    concat(queries) {\n      return method.concat(queries, capSQL());\n    },\n\n    values(data, columns) {\n      return method.values(data, columns, capSQL());\n    },\n\n    sets(data, columns) {\n      return method.sets(data, columns, capSQL());\n    },\n\n    TableName,\n    ColumnSet,\n    Column\n  };\n  utils.lock(res, true, config.options);\n  return res;\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/helpers/index.js"],"names":["Column","require","ColumnSet","TableName","method","utils","module","exports","config","capSQL","options","res","insert","data","columns","table","update","concat","queries","values","sets","lock"],"mappings":"AAAA;;;;;;;;AASA,MAAM;AAACA,EAAAA;AAAD,IAAWC,OAAO,CAAE,UAAF,CAAxB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAcD,OAAO,CAAE,cAAF,CAA3B;;AACA,MAAM;AAACE,EAAAA;AAAD,IAAcF,OAAO,CAAE,cAAF,CAA3B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAE,WAAF,CAAtB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAE,UAAF,CAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCAK,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;AACvB,QAAMC,MAAM,GAAG,MAAMD,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACE,OAAP,CAAeD,MAAtD;;AACA,QAAME,GAAG,GAAG;AACRC,IAAAA,MAAM,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuB;AACzB,aAAOX,MAAM,CAACQ,MAAP,CAAcC,IAAd,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoCN,MAAM,EAA1C,CAAP;AACH,KAHO;;AAIRO,IAAAA,MAAM,CAACH,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,EAAuBL,OAAvB,EAAgC;AAClC,aAAON,MAAM,CAACY,MAAP,CAAcH,IAAd,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoCL,OAApC,EAA6CD,MAAM,EAAnD,CAAP;AACH,KANO;;AAORQ,IAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,aAAOd,MAAM,CAACa,MAAP,CAAcC,OAAd,EAAuBT,MAAM,EAA7B,CAAP;AACH,KATO;;AAURU,IAAAA,MAAM,CAACN,IAAD,EAAOC,OAAP,EAAgB;AAClB,aAAOV,MAAM,CAACe,MAAP,CAAcN,IAAd,EAAoBC,OAApB,EAA6BL,MAAM,EAAnC,CAAP;AACH,KAZO;;AAaRW,IAAAA,IAAI,CAACP,IAAD,EAAOC,OAAP,EAAgB;AAChB,aAAOV,MAAM,CAACgB,IAAP,CAAYP,IAAZ,EAAkBC,OAAlB,EAA2BL,MAAM,EAAjC,CAAP;AACH,KAfO;;AAgBRN,IAAAA,SAhBQ;AAiBRD,IAAAA,SAjBQ;AAkBRF,IAAAA;AAlBQ,GAAZ;AAoBAK,EAAAA,KAAK,CAACgB,IAAN,CAAWV,GAAX,EAAgB,IAAhB,EAAsBH,MAAM,CAACE,OAA7B;AACA,SAAOC,GAAP;AACH,CAxBD","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {Column} = require(`./column`);\r\nconst {ColumnSet} = require(`./column-set`);\r\nconst {TableName} = require(`./table-name`);\r\nconst method = require(`./methods`);\r\nconst utils = require(`../utils`);\r\n\r\n/**\r\n * @namespace helpers\r\n * @description\r\n * Namespace for query-formatting generators, available as {@link module:pg-promise~helpers pgp.helpers}, after initializing the library.\r\n *\r\n * It unifies the approach to generating multi-row `INSERT` / `UPDATE` queries with the single-row ones.\r\n *\r\n * See also: $[Performance Boost].\r\n *\r\n * @property {function} TableName\r\n * {@link helpers.TableName TableName} class constructor.\r\n *\r\n * @property {function} ColumnSet\r\n * {@link helpers.ColumnSet ColumnSet} class constructor.\r\n *\r\n * @property {function} Column\r\n * {@link helpers.Column Column} class constructor.\r\n *\r\n * @property {function} insert\r\n * {@link helpers.insert insert} static method.\r\n *\r\n * @property {function} update\r\n * {@link helpers.update update} static method.\r\n *\r\n * @property {function} values\r\n * {@link helpers.values values} static method.\r\n *\r\n * @property {function} sets\r\n * {@link helpers.sets sets} static method.\r\n *\r\n * @property {function} concat\r\n * {@link helpers.concat concat} static method.\r\n */\r\nmodule.exports = config => {\r\n    const capSQL = () => config.options && config.options.capSQL;\r\n    const res = {\r\n        insert(data, columns, table) {\r\n            return method.insert(data, columns, table, capSQL());\r\n        },\r\n        update(data, columns, table, options) {\r\n            return method.update(data, columns, table, options, capSQL());\r\n        },\r\n        concat(queries) {\r\n            return method.concat(queries, capSQL());\r\n        },\r\n        values(data, columns) {\r\n            return method.values(data, columns, capSQL());\r\n        },\r\n        sets(data, columns) {\r\n            return method.sets(data, columns, capSQL());\r\n        },\r\n        TableName,\r\n        ColumnSet,\r\n        Column\r\n    };\r\n    utils.lock(res, true, config.options);\r\n    return res;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}