{"ast":null,"code":"const npm = {\n  u: require('util'),\n  os: require('os'),\n  utils: require('../utils/static')\n};\nconst errorReasons = {\n  0: 'Page with index %d rejected.',\n  1: 'Source %s returned a rejection at index %d.',\n  2: 'Source %s threw an error at index %d.',\n  3: 'Destination %s returned a rejection at index %d.',\n  4: 'Destination %s threw an error at index %d.',\n  5: 'Source %s returned a non-array value at index %d.'\n};\n/**\r\n * @class errors.PageError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link page}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `PageError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {} error\r\n * The error that was thrown, or the rejection reason.\r\n *\r\n * @property {number} index\r\n * Index of the element in the sequence for which the error/rejection occurred.\r\n *\r\n * @property {number} duration\r\n * Duration (in milliseconds) of processing until the error/rejection occurred.\r\n *\r\n * @property {string} reason\r\n * Textual explanation of why the method failed.\r\n *\r\n * @property {} source\r\n * Resolved `data` parameter that was passed into the `source` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `source` function.\r\n *\r\n * @property {} dest\r\n * Resolved `data` parameter that was passed into the `dest` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `dest` function.\r\n *\r\n * @see\r\n * {@link page},\r\n * {@link batch}\r\n *\r\n */\n\nclass PageError extends Error {\n  constructor(e, code, cbName, duration) {\n    let message;\n\n    if (e.error instanceof Error) {\n      message = e.error.message;\n    } else {\n      message = e.error;\n\n      if (typeof message !== 'string') {\n        message = npm.u.inspect(message);\n      }\n    }\n\n    super(message);\n    this.name = this.constructor.name;\n    this.index = e.index;\n    this.duration = duration;\n    this.error = e.error;\n\n    if ('source' in e) {\n      this.source = e.source;\n    }\n\n    if ('dest' in e) {\n      this.dest = e.dest;\n    }\n\n    if (code) {\n      cbName = cbName ? '\\'' + cbName + '\\'' : '<anonymous>';\n      this.reason = npm.u.format(errorReasons[code], cbName, e.index);\n    } else {\n      this.reason = npm.u.format(errorReasons[code], e.index);\n    }\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n/**\r\n * @method errors.PageError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\n\n\nPageError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap0 = npm.utils.messageGap(level),\n        gap1 = npm.utils.messageGap(level + 1),\n        lines = ['PageError {', gap1 + 'message: ' + JSON.stringify(this.message), gap1 + 'reason: ' + this.reason, gap1 + 'index: ' + this.index, gap1 + 'duration: ' + this.duration];\n  lines.push(gap1 + 'error: ' + npm.utils.formatError(this.error, level + 1));\n  lines.push(gap0 + '}');\n  return lines.join(npm.os.EOL);\n};\n\nnpm.utils.addInspection(PageError, function () {\n  return this.toString();\n});\nmodule.exports = {\n  PageError\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/spex/lib/errors/page.js"],"names":["npm","u","require","os","utils","errorReasons","PageError","Error","constructor","e","code","cbName","duration","message","error","inspect","name","index","source","dest","reason","format","captureStackTrace","prototype","toString","level","parseInt","gap0","messageGap","gap1","lines","JSON","stringify","push","formatError","join","EOL","addInspection","module","exports"],"mappings":"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","sourcesContent":["const npm = {\r\n    u: require('util'),\r\n    os: require('os'),\r\n    utils: require('../utils/static')\r\n};\r\n\r\nconst errorReasons = {\r\n    0: 'Page with index %d rejected.',\r\n    1: 'Source %s returned a rejection at index %d.',\r\n    2: 'Source %s threw an error at index %d.',\r\n    3: 'Destination %s returned a rejection at index %d.',\r\n    4: 'Destination %s threw an error at index %d.',\r\n    5: 'Source %s returned a non-array value at index %d.'\r\n};\r\n\r\n/**\r\n * @class errors.PageError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link page}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `PageError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {} error\r\n * The error that was thrown, or the rejection reason.\r\n *\r\n * @property {number} index\r\n * Index of the element in the sequence for which the error/rejection occurred.\r\n *\r\n * @property {number} duration\r\n * Duration (in milliseconds) of processing until the error/rejection occurred.\r\n *\r\n * @property {string} reason\r\n * Textual explanation of why the method failed.\r\n *\r\n * @property {} source\r\n * Resolved `data` parameter that was passed into the `source` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `source` function.\r\n *\r\n * @property {} dest\r\n * Resolved `data` parameter that was passed into the `dest` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `dest` function.\r\n *\r\n * @see\r\n * {@link page},\r\n * {@link batch}\r\n *\r\n */\r\nclass PageError extends Error {\r\n\r\n    constructor(e, code, cbName, duration) {\r\n\r\n        let message;\r\n        if (e.error instanceof Error) {\r\n            message = e.error.message;\r\n        } else {\r\n            message = e.error;\r\n            if (typeof message !== 'string') {\r\n                message = npm.u.inspect(message);\r\n            }\r\n        }\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n\r\n        this.index = e.index;\r\n        this.duration = duration;\r\n        this.error = e.error;\r\n\r\n        if ('source' in e) {\r\n            this.source = e.source;\r\n        }\r\n\r\n        if ('dest' in e) {\r\n            this.dest = e.dest;\r\n        }\r\n\r\n        if (code) {\r\n            cbName = cbName ? ('\\'' + cbName + '\\'') : '<anonymous>';\r\n            this.reason = npm.u.format(errorReasons[code], cbName, e.index);\r\n        } else {\r\n            this.reason = npm.u.format(errorReasons[code], e.index);\r\n        }\r\n\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @method errors.PageError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nPageError.prototype.toString = function (level) {\r\n\r\n    level = level > 0 ? parseInt(level) : 0;\r\n\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'PageError {',\r\n            gap1 + 'message: ' + JSON.stringify(this.message),\r\n            gap1 + 'reason: ' + this.reason,\r\n            gap1 + 'index: ' + this.index,\r\n            gap1 + 'duration: ' + this.duration\r\n        ];\r\n\r\n    lines.push(gap1 + 'error: ' + npm.utils.formatError(this.error, level + 1));\r\n    lines.push(gap0 + '}');\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(PageError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {PageError};\r\n\r\n"]},"metadata":{},"sourceType":"script"}