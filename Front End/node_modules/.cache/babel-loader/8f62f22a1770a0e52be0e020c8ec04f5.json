{"ast":null,"code":"const db = require(\"../DB/index\");\n\nconst getPosts = async (req, res, next) => {\n  try {\n    let posts = await db.any(\"SELECT * FROM posts ORDER BY id DESC\");\n    res.status(200).json({\n      status: \"success\",\n      message: \"all users posts\",\n      payload: posts\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err\n    });\n    next();\n  }\n};\n\nconst getUsersPosts = async (req, res, next) => {\n  try {\n    let posts = await db.any(\"SELECT * FROM posts WHERE user_id=$1 ORDER BY id DESC\", req.params.id);\n    res.status(200).json({\n      status: \"success\",\n      message: \"all users posts\",\n      payload: posts\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err\n    });\n    next();\n  }\n};\n\nconst deletePost = async (req, res, next) => {\n  try {\n    let {\n      postId\n    } = req.params.id;\n    let post = (\"DELETE FROM posts WHERE id=$1 RETURNING *\", postId);\n    res.status(200).json({\n      status: \"success\",\n      message: \"all users posts\",\n      payload: post\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err\n    });\n    next();\n  }\n};\n\nconst editPost = async (req, res, next) => {\n  try {\n    let {\n      pictures,\n      caption\n    } = req.body;\n    let {\n      userId\n    } = req.params;\n    let post = await db.one(\"UPDATE posts SET pictures=$1, caption=$2  WHERE =$3\", [pictures, caption, userId]);\n    res.status(200).json({\n      status: \"success\",\n      message: \"all users posts\",\n      payload: post\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err\n    });\n    next();\n  }\n};\n\nconst createPost = async (req, res, next) => {\n  try {\n    let post = await db.one(`\n            INSERT INTO posts (user_id, pictures, captions) VALUES('${req.body.user_id}', '${req.body.pictures}', '${req.body.captions}') RETURNING *`);\n    res.status(200).json({\n      status: \"success\",\n      message: \"created a new post\",\n      payload: post\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err\n    });\n    next();\n  }\n};\n\nmodule.exports = {\n  getPosts,\n  getUsersPosts,\n  deletePost,\n  editPost,\n  createPost\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/Queries/post.js"],"names":["db","require","getPosts","req","res","next","posts","any","status","json","message","payload","err","getUsersPosts","params","id","deletePost","postId","post","editPost","pictures","caption","body","userId","one","createPost","user_id","captions","module","exports"],"mappings":"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","sourcesContent":["const db = require(\"../DB/index\");\nconst getPosts = async (req, res, next) => {\n  try {\n    let posts = await db.any(\"SELECT * FROM posts ORDER BY id DESC\");\n    res.status(200).json({\n      status: \"success\",\n      message: \"all users posts\",\n      payload: posts,\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err,\n    });\n    next();\n  }\n};\nconst getUsersPosts = async (req, res, next) => {\n  try {\n    let posts = await db.any(\n      \"SELECT * FROM posts WHERE user_id=$1 ORDER BY id DESC\",\n      req.params.id\n    );\n    res.status(200).json({\n      status: \"success\",\n      message: \"all users posts\",\n      payload: posts,\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err,\n    });\n    next();\n  }\n};\nconst deletePost = async (req, res, next) => {\n  try {\n    let { postId } = req.params.id;\n    let post = (\"DELETE FROM posts WHERE id=$1 RETURNING *\", postId);\n    res.status(200).json({\n      status: \"success\",\n      message: \"all users posts\",\n      payload: post,\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err,\n    });\n    next();\n  }\n};\nconst editPost = async (req, res, next) => {\n  try {\n    let { pictures, caption } = req.body;\n    let { userId } = req.params;\n    let post = await db.one(\n      \"UPDATE posts SET pictures=$1, caption=$2  WHERE =$3\",\n      [pictures, caption, userId]\n    );\n    res.status(200).json({\n      status: \"success\",\n      message: \"all users posts\",\n      payload: post,\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err,\n    });\n    next();\n  }\n};\nconst createPost = async (req, res, next) => {\n  try {\n    let post = await db.one(`\n            INSERT INTO posts (user_id, pictures, captions) VALUES('${req.body.user_id}', '${req.body.pictures}', '${req.body.captions}') RETURNING *`);\n    res.status(200).json({\n      status: \"success\",\n      message: \"created a new post\",\n      payload: post,\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err,\n    });\n    next();\n  }\n};\nmodule.exports = { getPosts, getUsersPosts, deletePost, editPost, createPost };\n"]},"metadata":{},"sourceType":"script"}