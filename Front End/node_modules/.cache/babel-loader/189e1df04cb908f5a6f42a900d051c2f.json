{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst npm = {\n  path: require(`path`),\n  util: require(`util`),\n  patterns: require(`../patterns`)\n}; ////////////////////////////////////////////\n// Simpler check for null/undefined;\n\nfunction isNull(value) {\n  return value === null || value === undefined;\n} ////////////////////////////////////////////////////////\n// Verifies parameter for being a non-empty text string;\n\n\nfunction isText(txt) {\n  return txt && typeof txt === `string` && /\\S/.test(txt);\n} ///////////////////////////////////////////////////////////\n// Approximates the environment as being for development.\n//\n// Proper configuration is having NODE_ENV = 'development', but this\n// method only checks for 'dev' being present, and regardless of the case.\n\n\nfunction isDev() {\n  const env = global.process.env.NODE_ENV || ``;\n  return env.toLowerCase().indexOf(`dev`) !== -1;\n} ///////////////////////////////////////////////////\n// Locks all properties in an object to read-only,\n// or freezes the entire object for any changes.\n\n\nfunction lock(obj, freeze, options) {\n  if (options && options.noLocking) {\n    return;\n  }\n\n  if (freeze) {\n    Object.freeze(obj); // freeze the entire object, permanently;\n  } else {\n    const desc = {\n      writable: false,\n      configurable: false,\n      enumerable: true\n    };\n\n    for (const p in obj) {\n      Object.defineProperty(obj, p, desc);\n    }\n  }\n} /////////////////////////////////////////////\n// Adds properties from source to the target,\n// making them read-only and enumerable.\n\n\nfunction addReadProperties(target, source) {\n  for (const p in source) {\n    addReadProp(target, p, source[p]);\n  }\n} ///////////////////////////////////////////////////////\n// Adds a read-only, non-deletable enumerable property.\n\n\nfunction addReadProp(obj, name, value, hidden) {\n  Object.defineProperty(obj, name, {\n    value,\n    configurable: false,\n    enumerable: !hidden,\n    writable: false\n  });\n} //////////////////////////////////////////////////////////////\n// Converts a connection string or object into its safe copy:\n// if password is present, it is masked with symbol '#'.\n\n\nfunction getSafeConnection(cn) {\n  const maskPassword = cs => cs.replace(/:(?![/])([^@]+)/, (_, m) => `:` + new Array(m.length + 1).join(`#`));\n\n  if (typeof cn === `object`) {\n    const copy = Object.assign({}, cn);\n\n    if (typeof copy.password === `string`) {\n      copy.password = copy.password.replace(/./g, `#`);\n    }\n\n    if (typeof copy.connectionString === `string`) {\n      copy.connectionString = maskPassword(copy.connectionString);\n    }\n\n    return copy;\n  }\n\n  return maskPassword(cn);\n} ///////////////////////////////////////////\n// Returns a space gap for console output;\n\n\nfunction messageGap(level) {\n  return ` `.repeat(level * 4);\n} /////////////////////////////////////////\n// Provides platform-neutral inheritance;\n\n\nfunction inherits(child, parent) {\n  child.prototype.__proto__ = parent.prototype;\n} ///////////////////////////////////////////////////////////////////////////\n// Checks if the path is absolute;\n//\n// Though we do test it, we still skip it from the coverage,\n// because it is platform-specific.\n//\n// istanbul ignore next\n\n\nfunction isPathAbsolute(path) {\n  // Based on: https://github.com/sindresorhus/path-is-absolute\n  if (process.platform === `win32`) {\n    const result = npm.patterns.splitDevice.exec(path);\n    const device = result[1] || ``;\n    const isUnc = !!device && device.charAt(1) !== `:`;\n    return !!result[2] || isUnc;\n  }\n\n  return path.charAt(0) === `/`;\n} // istanbul ignore next\n\n\nfunction getLocalStack(startIdx, maxLines) {\n  // from the call stack, we take up to maximum lines,\n  // starting with specified line index:\n  startIdx = startIdx || 0;\n  const endIdx = maxLines > 0 ? startIdx + maxLines : undefined;\n  return new Error().stack.split(`\\n`).filter(line => line.match(/\\(.+\\)/)).slice(startIdx, endIdx).join(`\\n`);\n} //////////////////////////////\n// Internal error container;\n\n\nfunction InternalError(error) {\n  this.error = error;\n} /////////////////////////////////////////////////////////////////\n// Parses a property name, and gets its name from the object,\n// if the property exists. Returns object {valid, has, target, value}:\n//  - valid - true/false, whether the syntax is valid\n//  - has - a flag that property exists; set when 'valid' = true\n//  - target - the target object that contains the property; set when 'has' = true\n//  - value - the value; set when 'has' = true\n\n\nfunction getIfHas(obj, prop) {\n  const result = {\n    valid: true\n  };\n\n  if (prop.indexOf(`.`) === -1) {\n    result.has = prop in obj;\n    result.target = obj;\n\n    if (result.has) {\n      result.value = obj[prop];\n    }\n  } else {\n    const names = prop.split(`.`);\n    let missing, target;\n\n    for (let i = 0; i < names.length; i++) {\n      const n = names[i];\n\n      if (!n) {\n        result.valid = false;\n        return result;\n      }\n\n      if (!missing && hasProperty(obj, n)) {\n        target = obj;\n        obj = obj[n];\n      } else {\n        missing = true;\n      }\n    }\n\n    result.has = !missing;\n\n    if (result.has) {\n      result.target = target;\n      result.value = obj;\n    }\n  }\n\n  return result;\n} /////////////////////////////////////////////////////////////////////////\n// Checks if the property exists in the object or value or its prototype;\n\n\nfunction hasProperty(value, prop) {\n  return value && typeof value === `object` && prop in value || value !== null && value !== undefined && value[prop] !== undefined;\n} ////////////////////////////////////////////////////////\n// Adds prototype inspection\n\n\nfunction addInspection(type, cb) {\n  type.prototype[npm.util.inspect.custom] = cb;\n} /////////////////////////////////////////////////////////////////////////////////////////\n// Identifies a general connectivity error, after which no more queries can be executed.\n// This is for detecting when to skip executing ROLLBACK for a failed transaction.\n\n\nfunction isConnectivityError(err) {\n  const code = err && typeof err.code === `string` && err.code;\n  const cls = code && code.substr(0, 2); // Error Class\n  // istanbul ignore next (we cannot test-cover all error cases):\n\n  return code === `ECONNRESET` || cls === `08` && code !== `08P01` || cls === `57` && code !== `57014`; // Code 'ECONNRESET' - Connectivity issue handled by the driver.\n  // Class 08 - Connection Exception (except for 08P01, for protocol violation).\n  // Class 57 - Operator Intervention (except for 57014, for cancelled queries).\n  //\n  // ERROR CODES: https://www.postgresql.org/docs/9.6/static/errcodes-appendix.html\n} ///////////////////////////////////////////////////////////////\n// Does JSON.stringify, with support for BigInt (irreversible)\n\n\nfunction toJson(data) {\n  if (data !== undefined) {\n    return JSON.stringify(data, (_, v) => typeof v === `bigint` ? `${v}#bigint` : v).replace(/\"(-?\\d+)#bigint\"/g, (_, a) => a);\n  }\n}\n\nconst exp = {\n  toJson,\n  getIfHas,\n  addInspection,\n  InternalError,\n  getLocalStack,\n  isPathAbsolute,\n  lock,\n  isText,\n  isNull,\n  isDev,\n  addReadProp,\n  addReadProperties,\n  getSafeConnection,\n  messageGap,\n  inherits,\n  isConnectivityError\n};\nconst mainFile = process.argv[1]; // istanbul ignore next\n\nexp.startDir = mainFile ? npm.path.dirname(mainFile) : process.cwd();\nmodule.exports = exp;","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/utils/index.js"],"names":["npm","path","require","util","patterns","isNull","value","undefined","isText","txt","test","isDev","env","global","process","NODE_ENV","toLowerCase","indexOf","lock","obj","freeze","options","noLocking","Object","desc","writable","configurable","enumerable","p","defineProperty","addReadProperties","target","source","addReadProp","name","hidden","getSafeConnection","cn","maskPassword","cs","replace","_","m","Array","length","join","copy","assign","password","connectionString","messageGap","level","repeat","inherits","child","parent","prototype","__proto__","isPathAbsolute","platform","result","splitDevice","exec","device","isUnc","charAt","getLocalStack","startIdx","maxLines","endIdx","Error","stack","split","filter","line","match","slice","InternalError","error","getIfHas","prop","valid","has","names","missing","i","n","hasProperty","addInspection","type","cb","inspect","custom","isConnectivityError","err","code","cls","substr","toJson","data","JSON","stringify","v","a","exp","mainFile","argv","startDir","dirname","cwd","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst npm = {\r\n    path: require(`path`),\r\n    util: require(`util`),\r\n    patterns: require(`../patterns`)\r\n};\r\n\r\n////////////////////////////////////////////\r\n// Simpler check for null/undefined;\r\nfunction isNull(value) {\r\n    return value === null || value === undefined;\r\n}\r\n\r\n////////////////////////////////////////////////////////\r\n// Verifies parameter for being a non-empty text string;\r\nfunction isText(txt) {\r\n    return txt && typeof txt === `string` && /\\S/.test(txt);\r\n}\r\n\r\n///////////////////////////////////////////////////////////\r\n// Approximates the environment as being for development.\r\n//\r\n// Proper configuration is having NODE_ENV = 'development', but this\r\n// method only checks for 'dev' being present, and regardless of the case.\r\nfunction isDev() {\r\n    const env = global.process.env.NODE_ENV || ``;\r\n    return env.toLowerCase().indexOf(`dev`) !== -1;\r\n}\r\n\r\n///////////////////////////////////////////////////\r\n// Locks all properties in an object to read-only,\r\n// or freezes the entire object for any changes.\r\nfunction lock(obj, freeze, options) {\r\n    if (options && options.noLocking) {\r\n        return;\r\n    }\r\n    if (freeze) {\r\n        Object.freeze(obj); // freeze the entire object, permanently;\r\n    } else {\r\n        const desc = {\r\n            writable: false,\r\n            configurable: false,\r\n            enumerable: true\r\n        };\r\n        for (const p in obj) {\r\n            Object.defineProperty(obj, p, desc);\r\n        }\r\n    }\r\n}\r\n\r\n/////////////////////////////////////////////\r\n// Adds properties from source to the target,\r\n// making them read-only and enumerable.\r\nfunction addReadProperties(target, source) {\r\n    for (const p in source) {\r\n        addReadProp(target, p, source[p]);\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n// Adds a read-only, non-deletable enumerable property.\r\nfunction addReadProp(obj, name, value, hidden) {\r\n    Object.defineProperty(obj, name, {\r\n        value,\r\n        configurable: false,\r\n        enumerable: !hidden,\r\n        writable: false\r\n    });\r\n}\r\n\r\n//////////////////////////////////////////////////////////////\r\n// Converts a connection string or object into its safe copy:\r\n// if password is present, it is masked with symbol '#'.\r\nfunction getSafeConnection(cn) {\r\n    const maskPassword = cs => cs.replace(/:(?![/])([^@]+)/, (_, m) => `:` + new Array(m.length + 1).join(`#`));\r\n    if (typeof cn === `object`) {\r\n        const copy = Object.assign({}, cn);\r\n        if (typeof copy.password === `string`) {\r\n            copy.password = copy.password.replace(/./g, `#`);\r\n        }\r\n        if (typeof copy.connectionString === `string`) {\r\n            copy.connectionString = maskPassword(copy.connectionString);\r\n        }\r\n        return copy;\r\n    }\r\n    return maskPassword(cn);\r\n}\r\n\r\n///////////////////////////////////////////\r\n// Returns a space gap for console output;\r\nfunction messageGap(level) {\r\n    return ` `.repeat(level * 4);\r\n}\r\n\r\n/////////////////////////////////////////\r\n// Provides platform-neutral inheritance;\r\nfunction inherits(child, parent) {\r\n    child.prototype.__proto__ = parent.prototype;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////\r\n// Checks if the path is absolute;\r\n//\r\n// Though we do test it, we still skip it from the coverage,\r\n// because it is platform-specific.\r\n//\r\n// istanbul ignore next\r\nfunction isPathAbsolute(path) {\r\n    // Based on: https://github.com/sindresorhus/path-is-absolute\r\n    if (process.platform === `win32`) {\r\n        const result = npm.patterns.splitDevice.exec(path);\r\n        const device = result[1] || ``;\r\n        const isUnc = !!device && device.charAt(1) !== `:`;\r\n        return !!result[2] || isUnc;\r\n    }\r\n    return path.charAt(0) === `/`;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction getLocalStack(startIdx, maxLines) {\r\n    // from the call stack, we take up to maximum lines,\r\n    // starting with specified line index:\r\n    startIdx = startIdx || 0;\r\n    const endIdx = maxLines > 0 ? startIdx + maxLines : undefined;\r\n    return new Error().stack\r\n        .split(`\\n`)\r\n        .filter(line => line.match(/\\(.+\\)/))\r\n        .slice(startIdx, endIdx)\r\n        .join(`\\n`);\r\n}\r\n\r\n//////////////////////////////\r\n// Internal error container;\r\nfunction InternalError(error) {\r\n    this.error = error;\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////\r\n// Parses a property name, and gets its name from the object,\r\n// if the property exists. Returns object {valid, has, target, value}:\r\n//  - valid - true/false, whether the syntax is valid\r\n//  - has - a flag that property exists; set when 'valid' = true\r\n//  - target - the target object that contains the property; set when 'has' = true\r\n//  - value - the value; set when 'has' = true\r\nfunction getIfHas(obj, prop) {\r\n    const result = {valid: true};\r\n    if (prop.indexOf(`.`) === -1) {\r\n        result.has = prop in obj;\r\n        result.target = obj;\r\n        if (result.has) {\r\n            result.value = obj[prop];\r\n        }\r\n    } else {\r\n        const names = prop.split(`.`);\r\n        let missing, target;\r\n        for (let i = 0; i < names.length; i++) {\r\n            const n = names[i];\r\n            if (!n) {\r\n                result.valid = false;\r\n                return result;\r\n            }\r\n            if (!missing && hasProperty(obj, n)) {\r\n                target = obj;\r\n                obj = obj[n];\r\n            } else {\r\n                missing = true;\r\n            }\r\n        }\r\n        result.has = !missing;\r\n        if (result.has) {\r\n            result.target = target;\r\n            result.value = obj;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////\r\n// Checks if the property exists in the object or value or its prototype;\r\nfunction hasProperty(value, prop) {\r\n    return (value && typeof value === `object` && prop in value) ||\r\n        value !== null && value !== undefined && value[prop] !== undefined;\r\n}\r\n\r\n////////////////////////////////////////////////////////\r\n// Adds prototype inspection\r\nfunction addInspection(type, cb) {\r\n    type.prototype[npm.util.inspect.custom] = cb;\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////\r\n// Identifies a general connectivity error, after which no more queries can be executed.\r\n// This is for detecting when to skip executing ROLLBACK for a failed transaction.\r\nfunction isConnectivityError(err) {\r\n    const code = err && typeof err.code === `string` && err.code;\r\n    const cls = code && code.substr(0, 2); // Error Class\r\n    // istanbul ignore next (we cannot test-cover all error cases):\r\n    return code === `ECONNRESET` || (cls === `08` && code !== `08P01`) || (cls === `57` && code !== `57014`);\r\n    // Code 'ECONNRESET' - Connectivity issue handled by the driver.\r\n    // Class 08 - Connection Exception (except for 08P01, for protocol violation).\r\n    // Class 57 - Operator Intervention (except for 57014, for cancelled queries).\r\n    //\r\n    // ERROR CODES: https://www.postgresql.org/docs/9.6/static/errcodes-appendix.html\r\n}\r\n\r\n///////////////////////////////////////////////////////////////\r\n// Does JSON.stringify, with support for BigInt (irreversible)\r\nfunction toJson(data) {\r\n    if (data !== undefined) {\r\n        return JSON.stringify(data, (_, v) => typeof v === `bigint` ? `${v}#bigint` : v)\r\n            .replace(/\"(-?\\d+)#bigint\"/g, (_, a) => a);\r\n    }\r\n}\r\n\r\nconst exp = {\r\n    toJson,\r\n    getIfHas,\r\n    addInspection,\r\n    InternalError,\r\n    getLocalStack,\r\n    isPathAbsolute,\r\n    lock,\r\n    isText,\r\n    isNull,\r\n    isDev,\r\n    addReadProp,\r\n    addReadProperties,\r\n    getSafeConnection,\r\n    messageGap,\r\n    inherits,\r\n    isConnectivityError\r\n};\r\n\r\nconst mainFile = process.argv[1];\r\n\r\n// istanbul ignore next\r\nexp.startDir = mainFile ? npm.path.dirname(mainFile) : process.cwd();\r\n\r\nmodule.exports = exp;\r\n"]},"metadata":{},"sourceType":"script"}