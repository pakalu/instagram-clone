{"ast":null,"code":"const db = require(\"../DB/index\");\n\nconst getAllUsers = async (req, res, next) => {\n  try {\n    let userId = req.params.id;\n    let user = await db.one(\"SELECT * FROM users\");\n    res.status(200).json({\n      status: \"success\",\n      message: \"single user\",\n      payload: user\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Couldn't get User\",\n      payload: err\n    });\n  }\n};\n\nconst login = async (req, res, next) => {\n  try {\n    let user = await db.one(`SELECT * FROM users WHERE userName = '${req.body.username}' AND password = '${req.body.password}'`);\n    res.status(200).json({\n      user,\n      status: \"success\",\n      message: \"USER\"\n    });\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst deleteUser = async (req, res, next) => {\n  try {\n    let {\n      userId\n    } = req.params.id;\n    let user = (\"DELETE FROM users WHERE id=$1 RETURNING *\", userId);\n    res.status(200).json({\n      status: \"success\",\n      message: \" user deleted\",\n      payload: user\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err\n    });\n  }\n};\n\nconst editUser = async (req, res, next) => {\n  try {\n    let {\n      username,\n      user_pic\n    } = req.body;\n    let userId = req.params.id;\n    let user = await db.one(`UPDATE users SET  username='${username}', user_pic='${user_pic}' WHERE id=${userId} RETURNING *`);\n    res.status(200).json({\n      status: \"success\",\n      message: \"all users posts\",\n      payload: user\n    });\n  } catch (err) {\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err\n    });\n  }\n};\n\nconst createUser = async (req, res) => {\n  console.log(req.body);\n\n  try {\n    let user = await db.one(\"INSERT INTO users (id, fullname, username, email, password, user_pic) VALUES(${id}, ${fullname}, ${username}, ${email}, ${password}, ${user_pic}) RETURNING *\", req.body);\n    res.status(200).json({\n      user,\n      status: \"success\",\n      message: \"added user\"\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(400).json({\n      status: \"Error\",\n      message: \"Error\",\n      payload: err\n    });\n  }\n};\n\nmodule.exports = {\n  getAllUsers,\n  login,\n  deleteUser,\n  editUser,\n  createUser\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/Queries/user.js"],"names":["db","require","getAllUsers","req","res","next","userId","params","id","user","one","status","json","message","payload","err","login","body","username","password","deleteUser","editUser","user_pic","createUser","console","log","module","exports"],"mappings":"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","sourcesContent":["const db = require(\"../DB/index\");\n\nconst getAllUsers = async (req, res, next) => {\n    try {\n        let userId = req.params.id;\n        let user = await db.one(\"SELECT * FROM users\");\n        res.status(200).json({\n            status: \"success\",\n            message: \"single user\",\n            payload: user\n        })\n    } catch (err){\n        res.status(400).json({\n            status: \"Error\",\n            message: \"Couldn't get User\",\n            payload: err\n        })\n       \n    }\n}\n\nconst login = async (req, res, next) => {\n    try{\n        let user = await db.one(\n            `SELECT * FROM users WHERE userName = '${req.body.username}' AND password = '${req.body.password}'`\n            );\n            res.status(200).json({\n                user, \n                status: \"success\",\n                message: \"USER\"\n            })\n    } catch (err){\n        next(err);\n    }\n}\n\n\nconst deleteUser = async (req, res, next) => {\n    try {\n        let {userId} = req.params.id;\n        let user = (\"DELETE FROM users WHERE id=$1 RETURNING *\", userId)\n        res.status(200).json({\n            status: \"success\",\n            message: \" user deleted\",\n            payload: user\n        })\n    } catch (err){\n        res.status(400).json({\n            status: \"Error\",\n            message: \"Error\",\n            payload: err\n        })\n       \n    }\n}\n\nconst editUser = async (req, res, next) => {\n    try {\n        let {username, user_pic} = req.body;\n        let userId = req.params.id;\n        let user = await db.one(`UPDATE users SET  username='${username}', user_pic='${user_pic}' WHERE id=${userId} RETURNING *`);\n        res.status(200).json({\n            status: \"success\",\n            message: \"all users posts\",\n            payload: user\n        })\n    } catch (err){\n        res.status(400).json({\n            status: \"Error\",\n            message: \"Error\",\n            payload: err\n        })\n       \n    }\n}\n\nconst createUser = async (req, res) => {\n    console.log(req.body)\n    try {\n        let user = await db.one(\n            \"INSERT INTO users (id, fullname, username, email, password, user_pic) VALUES(${id}, ${fullname}, ${username}, ${email}, ${password}, ${user_pic}) RETURNING *\" , \n            req.body)\n            \n        res.status(200).json({\n            user,\n            status: \"success\",\n            message: \"added user\"\n        })\n    } catch (err){\n        console.log(err)\n        res.status(400).json({\n            status: \"Error\",\n            message: \"Error\",\n            payload: err\n        })\n       \n    }\n}\n\nmodule.exports = {getAllUsers, login, deleteUser, editUser, createUser}\n\n\n\n"]},"metadata":{},"sourceType":"script"}