{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  InnerState\n} = require(`./inner-state`);\n\nconst {\n  addInspection\n} = require(`./utils`);\n\nconst {\n  assertOptions\n} = require(`assert-options`);\n/**\r\n * @enum {number}\r\n * @alias txMode.isolationLevel\r\n * @readonly\r\n * @summary Transaction Isolation Level.\r\n * @description\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @see $[Transaction Isolation]\r\n */\n\n\nconst isolationLevel = {\n  /** Isolation level not specified. */\n  none: 0,\n\n  /** ISOLATION LEVEL SERIALIZABLE */\n  serializable: 1,\n\n  /** ISOLATION LEVEL REPEATABLE READ */\n  repeatableRead: 2,\n\n  /** ISOLATION LEVEL READ COMMITTED */\n  readCommitted: 3 // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\n  // The SQL standard defines one additional level, READ UNCOMMITTED. In PostgreSQL READ UNCOMMITTED is treated as READ COMMITTED.\n  // => skipping `READ UNCOMMITTED`.\n\n};\n/**\r\n * @class txMode.TransactionMode\r\n * @description\r\n * Constructs a complete transaction-opening `BEGIN` command, from these options:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @param {} [options]\r\n * Transaction Mode options.\r\n *\r\n * @param {txMode.isolationLevel} [options.tiLevel]\r\n * Transaction Isolation Level.\r\n *\r\n * @param {boolean} [options.readOnly]\r\n * Sets transaction access mode based on the read-only flag:\r\n *  - `undefined` - access mode not specified (default)\r\n *  - `true` - access mode is set to `READ ONLY`\r\n *  - `false` - access mode is set to `READ WRITE`\r\n *\r\n * @param {boolean} [options.deferrable]\r\n * Sets transaction deferrable mode based on the boolean value:\r\n *  - `undefined` - deferrable mode not specified (default)\r\n *  - `true` - mode is set to `DEFERRABLE`\r\n *  - `false` - mode is set to `NOT DEFERRABLE`\r\n *\r\n * It is used only when `tiLevel`=`isolationLevel.serializable`\r\n * and `readOnly`=`true`, or else it is ignored.\r\n *\r\n * @returns {txMode.TransactionMode}\r\n *\r\n * @see $[BEGIN], {@link txMode.isolationLevel}\r\n *\r\n * @example\r\n *\r\n * const TransactionMode = pgp.txMode.TransactionMode;\r\n * const isolationLevel = pgp.txMode.isolationLevel;\r\n *\r\n * // Create a reusable transaction mode (serializable + read-only + deferrable):\r\n * const mode = new TransactionMode({\r\n *     tiLevel: isolationLevel.serializable,\r\n *     readOnly: true,\r\n *     deferrable: true\r\n * });\r\n *\r\n * db.tx({mode}, t => {\r\n *     return t.any('SELECT * FROM table');\r\n * })\r\n *     .then(data => {\r\n *         // success;\r\n *     })\r\n *     .catch(error => {\r\n *         // error\r\n *     });\r\n *\r\n * // Instead of the default BEGIN, such transaction will start with:\r\n *\r\n * // BEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\r\n *\r\n */\n\nclass TransactionMode extends InnerState {\n  constructor(options) {\n    options = assertOptions(options, [`tiLevel`, `deferrable`, `readOnly`]);\n    const {\n      readOnly,\n      deferrable\n    } = options;\n    let {\n      tiLevel\n    } = options;\n    let level,\n        accessMode,\n        deferrableMode,\n        begin = `begin`;\n    tiLevel = tiLevel > 0 ? parseInt(tiLevel) : 0;\n\n    if (tiLevel > 0 && tiLevel < 4) {\n      const values = [`serializable`, `repeatable read`, `read committed`];\n      level = `isolation level ` + values[tiLevel - 1];\n    }\n\n    if (readOnly) {\n      accessMode = `read only`;\n    } else {\n      if (readOnly !== undefined) {\n        accessMode = `read write`;\n      }\n    } // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\n    // The DEFERRABLE transaction property has no effect unless the transaction is also SERIALIZABLE and READ ONLY\n\n\n    if (tiLevel === isolationLevel.serializable && readOnly) {\n      if (deferrable) {\n        deferrableMode = `deferrable`;\n      } else {\n        if (deferrable !== undefined) {\n          deferrableMode = `not deferrable`;\n        }\n      }\n    }\n\n    if (level) {\n      begin += ` ` + level;\n    }\n\n    if (accessMode) {\n      begin += ` ` + accessMode;\n    }\n\n    if (deferrableMode) {\n      begin += ` ` + deferrableMode;\n    }\n\n    super({\n      begin,\n      capBegin: begin.toUpperCase()\n    });\n  }\n  /**\r\n   * @method txMode.TransactionMode#begin\r\n   * @description\r\n   * Returns a complete BEGIN statement, according to all the parameters passed into the class.\r\n   *\r\n   * This method is primarily for internal use by the library.\r\n   *\r\n   * @param {boolean} [cap=false]\r\n   * Indicates whether the returned SQL must be capitalized.\r\n   *\r\n   * @returns {string}\r\n   */\n\n\n  begin(cap) {\n    return cap ? this._inner.capBegin : this._inner.begin;\n  }\n\n}\n\naddInspection(TransactionMode, function () {\n  return this.begin(true);\n});\n/**\r\n * @namespace txMode\r\n * @description\r\n * Transaction Mode namespace, available as `pgp.txMode`, before and after initializing the library.\r\n *\r\n * Extends the default `BEGIN` with Transaction Mode parameters:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * @property {function} TransactionMode\r\n * {@link txMode.TransactionMode TransactionMode} class constructor.\r\n *\r\n * @property {txMode.isolationLevel} isolationLevel\r\n * Transaction Isolation Level enumerator\r\n *\r\n * @see $[BEGIN]\r\n */\n\nmodule.exports = {\n  isolationLevel,\n  TransactionMode\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/tx-mode.js"],"names":["InnerState","require","addInspection","assertOptions","isolationLevel","none","serializable","repeatableRead","readCommitted","TransactionMode","constructor","options","readOnly","deferrable","tiLevel","level","accessMode","deferrableMode","begin","parseInt","values","undefined","capBegin","toUpperCase","cap","_inner","module","exports"],"mappings":"AAAA;;;;;;;;AASA,MAAM;AAACA,EAAAA;AAAD,IAAeC,OAAO,CAAE,eAAF,CAA5B;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAkBD,OAAO,CAAE,SAAF,CAA/B;;AACA,MAAM;AAACE,EAAAA;AAAD,IAAkBF,OAAO,CAAE,gBAAF,CAA/B;AAEA;;;;;;;;;;;;AAUA,MAAMG,cAAc,GAAG;AACnB;AACAC,EAAAA,IAAI,EAAE,CAFa;;AAInB;AACAC,EAAAA,YAAY,EAAE,CALK;;AAOnB;AACAC,EAAAA,cAAc,EAAE,CARG;;AAUnB;AACAC,EAAAA,aAAa,EAAE,CAXI,CAanB;AACA;AACA;;AAfmB,CAAvB;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,MAAMC,eAAN,SAA8BT,UAA9B,CAAyC;AAErCU,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBA,IAAAA,OAAO,GAAGR,aAAa,CAACQ,OAAD,EAAU,CAAE,SAAF,EAAa,YAAb,EAA2B,UAA3B,CAAV,CAAvB;AACA,UAAM;AAACC,MAAAA,QAAD;AAAWC,MAAAA;AAAX,QAAyBF,OAA/B;AACA,QAAI;AAACG,MAAAA;AAAD,QAAYH,OAAhB;AACA,QAAII,KAAJ;AAAA,QAAWC,UAAX;AAAA,QAAuBC,cAAvB;AAAA,QAAuCC,KAAK,GAAI,OAAhD;AACAJ,IAAAA,OAAO,GAAIA,OAAO,GAAG,CAAX,GAAgBK,QAAQ,CAACL,OAAD,CAAxB,GAAoC,CAA9C;;AAEA,QAAIA,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAG,CAA7B,EAAgC;AAC5B,YAAMM,MAAM,GAAG,CAAE,cAAF,EAAkB,iBAAlB,EAAqC,gBAArC,CAAf;AACAL,MAAAA,KAAK,GAAI,kBAAD,GAAqBK,MAAM,CAACN,OAAO,GAAG,CAAX,CAAnC;AACH;;AACD,QAAIF,QAAJ,EAAc;AACVI,MAAAA,UAAU,GAAI,WAAd;AACH,KAFD,MAEO;AACH,UAAIJ,QAAQ,KAAKS,SAAjB,EAA4B;AACxBL,QAAAA,UAAU,GAAI,YAAd;AACH;AACJ,KAjBgB,CAkBjB;AACA;;;AACA,QAAIF,OAAO,KAAKV,cAAc,CAACE,YAA3B,IAA2CM,QAA/C,EAAyD;AACrD,UAAIC,UAAJ,EAAgB;AACZI,QAAAA,cAAc,GAAI,YAAlB;AACH,OAFD,MAEO;AACH,YAAIJ,UAAU,KAAKQ,SAAnB,EAA8B;AAC1BJ,UAAAA,cAAc,GAAI,gBAAlB;AACH;AACJ;AACJ;;AACD,QAAIF,KAAJ,EAAW;AACPG,MAAAA,KAAK,IAAK,GAAD,GAAMH,KAAf;AACH;;AACD,QAAIC,UAAJ,EAAgB;AACZE,MAAAA,KAAK,IAAK,GAAD,GAAMF,UAAf;AACH;;AACD,QAAIC,cAAJ,EAAoB;AAChBC,MAAAA,KAAK,IAAK,GAAD,GAAMD,cAAf;AACH;;AAED,UAAM;AAACC,MAAAA,KAAD;AAAQI,MAAAA,QAAQ,EAAEJ,KAAK,CAACK,WAAN;AAAlB,KAAN;AACH;AAED;;;;;;;;;;;;;;AAYAL,EAAAA,KAAK,CAACM,GAAD,EAAM;AACP,WAAOA,GAAG,GAAG,KAAKC,MAAL,CAAYH,QAAf,GAA0B,KAAKG,MAAL,CAAYP,KAAhD;AACH;;AA1DoC;;AA6DzChB,aAAa,CAACO,eAAD,EAAkB,YAAY;AACvC,SAAO,KAAKS,KAAL,CAAW,IAAX,CAAP;AACH,CAFY,CAAb;AAIA;;;;;;;;;;;;;;;;;;;AAkBAQ,MAAM,CAACC,OAAP,GAAiB;AACbvB,EAAAA,cADa;AAEbK,EAAAA;AAFa,CAAjB","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {InnerState} = require(`./inner-state`);\r\nconst {addInspection} = require(`./utils`);\r\nconst {assertOptions} = require(`assert-options`);\r\n\r\n/**\r\n * @enum {number}\r\n * @alias txMode.isolationLevel\r\n * @readonly\r\n * @summary Transaction Isolation Level.\r\n * @description\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @see $[Transaction Isolation]\r\n */\r\nconst isolationLevel = {\r\n    /** Isolation level not specified. */\r\n    none: 0,\r\n\r\n    /** ISOLATION LEVEL SERIALIZABLE */\r\n    serializable: 1,\r\n\r\n    /** ISOLATION LEVEL REPEATABLE READ */\r\n    repeatableRead: 2,\r\n\r\n    /** ISOLATION LEVEL READ COMMITTED */\r\n    readCommitted: 3\r\n\r\n    // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\r\n    // The SQL standard defines one additional level, READ UNCOMMITTED. In PostgreSQL READ UNCOMMITTED is treated as READ COMMITTED.\r\n    // => skipping `READ UNCOMMITTED`.\r\n};\r\n\r\n/**\r\n * @class txMode.TransactionMode\r\n * @description\r\n * Constructs a complete transaction-opening `BEGIN` command, from these options:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @param {} [options]\r\n * Transaction Mode options.\r\n *\r\n * @param {txMode.isolationLevel} [options.tiLevel]\r\n * Transaction Isolation Level.\r\n *\r\n * @param {boolean} [options.readOnly]\r\n * Sets transaction access mode based on the read-only flag:\r\n *  - `undefined` - access mode not specified (default)\r\n *  - `true` - access mode is set to `READ ONLY`\r\n *  - `false` - access mode is set to `READ WRITE`\r\n *\r\n * @param {boolean} [options.deferrable]\r\n * Sets transaction deferrable mode based on the boolean value:\r\n *  - `undefined` - deferrable mode not specified (default)\r\n *  - `true` - mode is set to `DEFERRABLE`\r\n *  - `false` - mode is set to `NOT DEFERRABLE`\r\n *\r\n * It is used only when `tiLevel`=`isolationLevel.serializable`\r\n * and `readOnly`=`true`, or else it is ignored.\r\n *\r\n * @returns {txMode.TransactionMode}\r\n *\r\n * @see $[BEGIN], {@link txMode.isolationLevel}\r\n *\r\n * @example\r\n *\r\n * const TransactionMode = pgp.txMode.TransactionMode;\r\n * const isolationLevel = pgp.txMode.isolationLevel;\r\n *\r\n * // Create a reusable transaction mode (serializable + read-only + deferrable):\r\n * const mode = new TransactionMode({\r\n *     tiLevel: isolationLevel.serializable,\r\n *     readOnly: true,\r\n *     deferrable: true\r\n * });\r\n *\r\n * db.tx({mode}, t => {\r\n *     return t.any('SELECT * FROM table');\r\n * })\r\n *     .then(data => {\r\n *         // success;\r\n *     })\r\n *     .catch(error => {\r\n *         // error\r\n *     });\r\n *\r\n * // Instead of the default BEGIN, such transaction will start with:\r\n *\r\n * // BEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\r\n *\r\n */\r\nclass TransactionMode extends InnerState {\r\n\r\n    constructor(options) {\r\n        options = assertOptions(options, [`tiLevel`, `deferrable`, `readOnly`]);\r\n        const {readOnly, deferrable} = options;\r\n        let {tiLevel} = options;\r\n        let level, accessMode, deferrableMode, begin = `begin`;\r\n        tiLevel = (tiLevel > 0) ? parseInt(tiLevel) : 0;\r\n\r\n        if (tiLevel > 0 && tiLevel < 4) {\r\n            const values = [`serializable`, `repeatable read`, `read committed`];\r\n            level = `isolation level ` + values[tiLevel - 1];\r\n        }\r\n        if (readOnly) {\r\n            accessMode = `read only`;\r\n        } else {\r\n            if (readOnly !== undefined) {\r\n                accessMode = `read write`;\r\n            }\r\n        }\r\n        // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\r\n        // The DEFERRABLE transaction property has no effect unless the transaction is also SERIALIZABLE and READ ONLY\r\n        if (tiLevel === isolationLevel.serializable && readOnly) {\r\n            if (deferrable) {\r\n                deferrableMode = `deferrable`;\r\n            } else {\r\n                if (deferrable !== undefined) {\r\n                    deferrableMode = `not deferrable`;\r\n                }\r\n            }\r\n        }\r\n        if (level) {\r\n            begin += ` ` + level;\r\n        }\r\n        if (accessMode) {\r\n            begin += ` ` + accessMode;\r\n        }\r\n        if (deferrableMode) {\r\n            begin += ` ` + deferrableMode;\r\n        }\r\n\r\n        super({begin, capBegin: begin.toUpperCase()});\r\n    }\r\n\r\n    /**\r\n     * @method txMode.TransactionMode#begin\r\n     * @description\r\n     * Returns a complete BEGIN statement, according to all the parameters passed into the class.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @param {boolean} [cap=false]\r\n     * Indicates whether the returned SQL must be capitalized.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    begin(cap) {\r\n        return cap ? this._inner.capBegin : this._inner.begin;\r\n    }\r\n}\r\n\r\naddInspection(TransactionMode, function () {\r\n    return this.begin(true);\r\n});\r\n\r\n/**\r\n * @namespace txMode\r\n * @description\r\n * Transaction Mode namespace, available as `pgp.txMode`, before and after initializing the library.\r\n *\r\n * Extends the default `BEGIN` with Transaction Mode parameters:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * @property {function} TransactionMode\r\n * {@link txMode.TransactionMode TransactionMode} class constructor.\r\n *\r\n * @property {txMode.isolationLevel} isolationLevel\r\n * Transaction Isolation Level enumerator\r\n *\r\n * @see $[BEGIN]\r\n */\r\nmodule.exports = {\r\n    isolationLevel,\r\n    TransactionMode\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"script"}