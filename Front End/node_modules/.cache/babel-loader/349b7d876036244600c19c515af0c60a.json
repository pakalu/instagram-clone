{"ast":null,"code":"const npm = {\n  stream: require('stream'),\n  util: require('util')\n}; /////////////////////////////////////\n// Checks if the value is a promise;\n\nfunction isPromise(value) {\n  return value && typeof value.then === 'function';\n} ////////////////////////////////////////////\n// Checks object for being a readable stream;\n\n\nfunction isReadableStream(obj) {\n  return obj instanceof npm.stream.Stream && typeof obj._read === 'function' && typeof obj._readableState === 'object';\n} ////////////////////////////////////////////////////////////\n// Sets an object property as read-only and non-enumerable.\n\n\nfunction extend(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value: value,\n    configurable: false,\n    enumerable: false,\n    writable: false\n  });\n} ///////////////////////////////////////////\n// Returns a space gap for console output;\n\n\nfunction messageGap(level) {\n  return ' '.repeat(level * 4);\n}\n\nfunction formatError(error, level) {\n  const names = ['BatchError', 'PageError', 'SequenceError'];\n  let msg = npm.util.inspect(error);\n\n  if (error instanceof Error) {\n    if (names.indexOf(error.name) === -1) {\n      const gap = messageGap(level);\n      msg = msg.split('\\n').map((line, index) => {\n        return (index ? gap : '') + line;\n      }).join('\\n');\n    } else {\n      msg = error.toString(level);\n    }\n  }\n\n  return msg;\n} ////////////////////////////////////////////////////////\n// Adds prototype inspection, with support of the newer\n// Custom Inspection, which was added in Node.js 6.x\n\n\nfunction addInspection(type, cb) {\n  // istanbul ignore next;\n  if (npm.util.inspect.custom) {\n    // Custom inspection is supported:\n    type.prototype[npm.util.inspect.custom] = cb;\n  } else {\n    // Use classic inspection:\n    type.prototype.inspect = cb;\n  }\n}\n\nmodule.exports = {\n  addInspection: addInspection,\n  formatError: formatError,\n  isPromise: isPromise,\n  isReadableStream: isReadableStream,\n  messageGap: messageGap,\n  extend: extend\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/spex/lib/utils/static.js"],"names":["npm","stream","require","util","isPromise","value","then","isReadableStream","obj","Stream","_read","_readableState","extend","name","Object","defineProperty","configurable","enumerable","writable","messageGap","level","repeat","formatError","error","names","msg","inspect","Error","indexOf","gap","split","map","line","index","join","toString","addInspection","type","cb","custom","prototype","module","exports"],"mappings":"AAAA,MAAMA,GAAG,GAAG;AACRC,EAAAA,MAAM,EAAEC,OAAO,CAAC,QAAD,CADP;AAERC,EAAAA,IAAI,EAAED,OAAO,CAAC,MAAD;AAFL,CAAZ,C,CAKA;AACA;;AACA,SAASE,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,SAAOA,KAAK,IAAI,OAAOA,KAAK,CAACC,IAAb,KAAsB,UAAtC;AACH,C,CAED;AACA;;;AAEA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,SAAOA,GAAG,YAAYR,GAAG,CAACC,MAAJ,CAAWQ,MAA1B,IACH,OAAOD,GAAG,CAACE,KAAX,KAAqB,UADlB,IAEH,OAAOF,GAAG,CAACG,cAAX,KAA8B,QAFlC;AAGH,C,CAED;AACA;;;AACA,SAASC,MAAT,CAAgBJ,GAAhB,EAAqBK,IAArB,EAA2BR,KAA3B,EAAkC;AAC9BS,EAAAA,MAAM,CAACC,cAAP,CAAsBP,GAAtB,EAA2BK,IAA3B,EAAiC;AAC7BR,IAAAA,KAAK,EAAEA,KADsB;AAE7BW,IAAAA,YAAY,EAAE,KAFe;AAG7BC,IAAAA,UAAU,EAAE,KAHiB;AAI7BC,IAAAA,QAAQ,EAAE;AAJmB,GAAjC;AAMH,C,CAED;AACA;;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACvB,SAAO,IAAIC,MAAJ,CAAWD,KAAK,GAAG,CAAnB,CAAP;AACH;;AAED,SAASE,WAAT,CAAqBC,KAArB,EAA4BH,KAA5B,EAAmC;AAC/B,QAAMI,KAAK,GAAG,CAAC,YAAD,EAAe,WAAf,EAA4B,eAA5B,CAAd;AACA,MAAIC,GAAG,GAAGzB,GAAG,CAACG,IAAJ,CAASuB,OAAT,CAAiBH,KAAjB,CAAV;;AACA,MAAIA,KAAK,YAAYI,KAArB,EAA4B;AACxB,QAAIH,KAAK,CAACI,OAAN,CAAcL,KAAK,CAACV,IAApB,MAA8B,CAAC,CAAnC,EAAsC;AAClC,YAAMgB,GAAG,GAAGV,UAAU,CAACC,KAAD,CAAtB;AACAK,MAAAA,GAAG,GAAGA,GAAG,CAACK,KAAJ,CAAU,IAAV,EAAgBC,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvC,eAAO,CAACA,KAAK,GAAGJ,GAAH,GAAS,EAAf,IAAqBG,IAA5B;AACH,OAFK,EAEHE,IAFG,CAEE,IAFF,CAAN;AAGH,KALD,MAKO;AACHT,MAAAA,GAAG,GAAGF,KAAK,CAACY,QAAN,CAAef,KAAf,CAAN;AACH;AACJ;;AACD,SAAOK,GAAP;AACH,C,CAED;AACA;AACA;;;AACA,SAASW,aAAT,CAAuBC,IAAvB,EAA6BC,EAA7B,EAAiC;AAC7B;AACA,MAAItC,GAAG,CAACG,IAAJ,CAASuB,OAAT,CAAiBa,MAArB,EAA6B;AACzB;AACAF,IAAAA,IAAI,CAACG,SAAL,CAAexC,GAAG,CAACG,IAAJ,CAASuB,OAAT,CAAiBa,MAAhC,IAA0CD,EAA1C;AACH,GAHD,MAGO;AACH;AACAD,IAAAA,IAAI,CAACG,SAAL,CAAed,OAAf,GAAyBY,EAAzB;AACH;AACJ;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACbN,EAAAA,aAAa,EAAEA,aADF;AAEbd,EAAAA,WAAW,EAAEA,WAFA;AAGblB,EAAAA,SAAS,EAAEA,SAHE;AAIbG,EAAAA,gBAAgB,EAAEA,gBAJL;AAKbY,EAAAA,UAAU,EAAEA,UALC;AAMbP,EAAAA,MAAM,EAAEA;AANK,CAAjB","sourcesContent":["const npm = {\r\n    stream: require('stream'),\r\n    util: require('util')\r\n};\r\n\r\n/////////////////////////////////////\r\n// Checks if the value is a promise;\r\nfunction isPromise(value) {\r\n    return value && typeof value.then === 'function';\r\n}\r\n\r\n////////////////////////////////////////////\r\n// Checks object for being a readable stream;\r\n\r\nfunction isReadableStream(obj) {\r\n    return obj instanceof npm.stream.Stream &&\r\n        typeof obj._read === 'function' &&\r\n        typeof obj._readableState === 'object';\r\n}\r\n\r\n////////////////////////////////////////////////////////////\r\n// Sets an object property as read-only and non-enumerable.\r\nfunction extend(obj, name, value) {\r\n    Object.defineProperty(obj, name, {\r\n        value: value,\r\n        configurable: false,\r\n        enumerable: false,\r\n        writable: false\r\n    });\r\n}\r\n\r\n///////////////////////////////////////////\r\n// Returns a space gap for console output;\r\nfunction messageGap(level) {\r\n    return ' '.repeat(level * 4);\r\n}\r\n\r\nfunction formatError(error, level) {\r\n    const names = ['BatchError', 'PageError', 'SequenceError'];\r\n    let msg = npm.util.inspect(error);\r\n    if (error instanceof Error) {\r\n        if (names.indexOf(error.name) === -1) {\r\n            const gap = messageGap(level);\r\n            msg = msg.split('\\n').map((line, index) => {\r\n                return (index ? gap : '') + line;\r\n            }).join('\\n');\r\n        } else {\r\n            msg = error.toString(level);\r\n        }\r\n    }\r\n    return msg;\r\n}\r\n\r\n////////////////////////////////////////////////////////\r\n// Adds prototype inspection, with support of the newer\r\n// Custom Inspection, which was added in Node.js 6.x\r\nfunction addInspection(type, cb) {\r\n    // istanbul ignore next;\r\n    if (npm.util.inspect.custom) {\r\n        // Custom inspection is supported:\r\n        type.prototype[npm.util.inspect.custom] = cb;\r\n    } else {\r\n        // Use classic inspection:\r\n        type.prototype.inspect = cb;\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    addInspection: addInspection,\r\n    formatError: formatError,\r\n    isPromise: isPromise,\r\n    isReadableStream: isReadableStream,\r\n    messageGap: messageGap,\r\n    extend: extend\r\n};\r\n"]},"metadata":{},"sourceType":"script"}