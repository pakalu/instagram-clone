{"ast":null,"code":"/**\r\n * @class PromiseAdapter\r\n * @description\r\n * Adapter for the primary promise operations.\r\n *\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * #### Example\r\n *\r\n * Below is an example of setting up a [client-side]{@tutorial client} adapter for AngularJS $q.\r\n *\r\n * ```js\r\n * const spexLib = require('spex'); // or include client-side spex.js\r\n *\r\n * const adapter = new spexLib.PromiseAdapter(\r\n *    cb => $q(cb), // creating a new promise;\r\n *    data => $q.when(data), // resolving a promise;\r\n *    reason => $q.reject(reason) // rejecting a promise;\r\n *    );\r\n *\r\n * const spex = spexLib(adapter);\r\n * ```\r\n *\r\n * @param {Function} create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to create a promise.`\r\n *\r\n * @param {Function} resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to resolve a promise.`\r\n *\r\n * @param {Function} reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to reject a promise.`\r\n *\r\n * @see {@tutorial client}\r\n *\r\n */\nclass PromiseAdapter {\n  constructor(create, resolve, reject) {\n    this.create = create;\n    this.resolve = resolve;\n    this.reject = reject;\n\n    if (typeof create !== 'function') {\n      throw new TypeError('Adapter requires a function to create a promise.');\n    }\n\n    if (typeof resolve !== 'function') {\n      throw new TypeError('Adapter requires a function to resolve a promise.');\n    }\n\n    if (typeof reject !== 'function') {\n      throw new TypeError('Adapter requires a function to reject a promise.');\n    }\n  }\n\n}\n\nmodule.exports = PromiseAdapter;","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/spex/lib/adapter.js"],"names":["PromiseAdapter","constructor","create","resolve","reject","TypeError","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,MAAMA,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACjC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;;AAEA,QAAI,OAAOF,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,YAAM,IAAIG,SAAJ,CAAc,kDAAd,CAAN;AACH;;AAED,QAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AAC/B,YAAM,IAAIE,SAAJ,CAAc,mDAAd,CAAN;AACH;;AAED,QAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,YAAM,IAAIC,SAAJ,CAAc,kDAAd,CAAN;AACH;AACJ;;AAjBgB;;AAoBrBC,MAAM,CAACC,OAAP,GAAiBP,cAAjB","sourcesContent":["/**\r\n * @class PromiseAdapter\r\n * @description\r\n * Adapter for the primary promise operations.\r\n *\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * #### Example\r\n *\r\n * Below is an example of setting up a [client-side]{@tutorial client} adapter for AngularJS $q.\r\n *\r\n * ```js\r\n * const spexLib = require('spex'); // or include client-side spex.js\r\n *\r\n * const adapter = new spexLib.PromiseAdapter(\r\n *    cb => $q(cb), // creating a new promise;\r\n *    data => $q.when(data), // resolving a promise;\r\n *    reason => $q.reject(reason) // rejecting a promise;\r\n *    );\r\n *\r\n * const spex = spexLib(adapter);\r\n * ```\r\n *\r\n * @param {Function} create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to create a promise.`\r\n *\r\n * @param {Function} resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to resolve a promise.`\r\n *\r\n * @param {Function} reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to reject a promise.`\r\n *\r\n * @see {@tutorial client}\r\n *\r\n */\r\nclass PromiseAdapter {\r\n    constructor(create, resolve, reject) {\r\n        this.create = create;\r\n        this.resolve = resolve;\r\n        this.reject = reject;\r\n\r\n        if (typeof create !== 'function') {\r\n            throw new TypeError('Adapter requires a function to create a promise.');\r\n        }\r\n\r\n        if (typeof resolve !== 'function') {\r\n            throw new TypeError('Adapter requires a function to resolve a promise.');\r\n        }\r\n\r\n        if (typeof reject !== 'function') {\r\n            throw new TypeError('Adapter requires a function to reject a promise.');\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = PromiseAdapter;\r\n"]},"metadata":{},"sourceType":"script"}