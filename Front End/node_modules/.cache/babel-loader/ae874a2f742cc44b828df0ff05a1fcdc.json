{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  TableName\n} = require(`../table-name`);\n\nconst {\n  ColumnSet\n} = require(`../column-set`);\n\nconst npm = {\n  formatting: require(`../../formatting`),\n  utils: require(`../../utils`)\n};\n/**\r\n * @method helpers.insert\r\n * @description\r\n * Generates an `INSERT` query for either one object or an array of objects.\r\n *\r\n * @param {object|object[]} data\r\n * An insert object with properties for insert values, or an array of such objects.\r\n *\r\n * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an INSERT from an empty array.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid insert object at index N.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Set of columns to be inserted.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when inserting multiple records.`\r\n *\r\n * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}\r\n * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array).\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate an INSERT without any columns.`\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [table]\r\n * Destination table.\r\n *\r\n * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object\r\n * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method\r\n * will throw {@link external:Error Error} = `Table name is unknown.`\r\n *\r\n * @returns {string}\r\n * An `INSERT` query string.\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet},\r\n *  {@link helpers.TableName TableName}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')({\r\n *    capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * const dataSingle = {val: 123, msg: 'hello'};\r\n * const dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Column details can be taken from the data object:\r\n *\r\n * pgp.helpers.insert(dataSingle, null, 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required for a multi-row `INSERT`:\r\n *\r\n * pgp.helpers.insert(dataMulti, ['val', 'msg'], 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['val', 'msg'], {table: 'my-table'});\r\n *\r\n * pgp.helpers.insert(dataMulti, cs);\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n */\n\nfunction insert(data, columns, table, capSQL) {\n  if (!data || typeof data !== `object`) {\n    throw new TypeError(`Invalid parameter 'data' specified.`);\n  }\n\n  const isArray = Array.isArray(data);\n\n  if (isArray && !data.length) {\n    throw new TypeError(`Cannot generate an INSERT from an empty array.`);\n  }\n\n  if (columns instanceof ColumnSet) {\n    if (npm.utils.isNull(table)) {\n      table = columns.table;\n    }\n  } else {\n    if (isArray && npm.utils.isNull(columns)) {\n      throw new TypeError(`Parameter 'columns' is required when inserting multiple records.`);\n    }\n\n    columns = new ColumnSet(columns || data);\n  }\n\n  if (!columns.columns.length) {\n    throw new Error(`Cannot generate an INSERT without any columns.`);\n  }\n\n  if (!table) {\n    throw new Error(`Table name is unknown.`);\n  }\n\n  if (!(table instanceof TableName)) {\n    table = new TableName(table);\n  }\n\n  let query = capSQL ? sql.capCase : sql.lowCase;\n  const fmOptions = {\n    capSQL\n  };\n  const format = npm.formatting.as.format;\n  query = format(query, [table.name, columns.names], fmOptions);\n\n  if (isArray) {\n    return query + data.map((d, index) => {\n      if (!d || typeof d !== `object`) {\n        throw new Error(`Invalid insert object at index ${index}.`);\n      }\n\n      return `(` + format(columns.variables, columns.prepare(d), fmOptions) + `)`;\n    }).join();\n  }\n\n  return query + `(` + format(columns.variables, columns.prepare(data), fmOptions) + `)`;\n}\n\nconst sql = {\n  lowCase: `insert into $1^($2^) values`,\n  capCase: `INSERT INTO $1^($2^) VALUES`\n};\nmodule.exports = {\n  insert\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/helpers/methods/insert.js"],"names":["TableName","require","ColumnSet","npm","formatting","utils","insert","data","columns","table","capSQL","TypeError","isArray","Array","length","isNull","Error","query","sql","capCase","lowCase","fmOptions","format","as","name","names","map","d","index","variables","prepare","join","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {TableName} = require(`../table-name`);\r\nconst {ColumnSet} = require(`../column-set`);\r\n\r\nconst npm = {\r\n    formatting: require(`../../formatting`),\r\n    utils: require(`../../utils`)\r\n};\r\n\r\n/**\r\n * @method helpers.insert\r\n * @description\r\n * Generates an `INSERT` query for either one object or an array of objects.\r\n *\r\n * @param {object|object[]} data\r\n * An insert object with properties for insert values, or an array of such objects.\r\n *\r\n * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an INSERT from an empty array.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid insert object at index N.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Set of columns to be inserted.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when inserting multiple records.`\r\n *\r\n * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}\r\n * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array).\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate an INSERT without any columns.`\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [table]\r\n * Destination table.\r\n *\r\n * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object\r\n * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method\r\n * will throw {@link external:Error Error} = `Table name is unknown.`\r\n *\r\n * @returns {string}\r\n * An `INSERT` query string.\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet},\r\n *  {@link helpers.TableName TableName}\r\n *\r\n * @example\r\n *\r\n * const pgp = require('pg-promise')({\r\n *    capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * const dataSingle = {val: 123, msg: 'hello'};\r\n * const dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Column details can be taken from the data object:\r\n *\r\n * pgp.helpers.insert(dataSingle, null, 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required for a multi-row `INSERT`:\r\n *\r\n * pgp.helpers.insert(dataMulti, ['val', 'msg'], 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * const cs = new pgp.helpers.ColumnSet(['val', 'msg'], {table: 'my-table'});\r\n *\r\n * pgp.helpers.insert(dataMulti, cs);\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n */\r\nfunction insert(data, columns, table, capSQL) {\r\n\r\n    if (!data || typeof data !== `object`) {\r\n        throw new TypeError(`Invalid parameter 'data' specified.`);\r\n    }\r\n\r\n    const isArray = Array.isArray(data);\r\n\r\n    if (isArray && !data.length) {\r\n        throw new TypeError(`Cannot generate an INSERT from an empty array.`);\r\n    }\r\n\r\n    if (columns instanceof ColumnSet) {\r\n        if (npm.utils.isNull(table)) {\r\n            table = columns.table;\r\n        }\r\n    } else {\r\n        if (isArray && npm.utils.isNull(columns)) {\r\n            throw new TypeError(`Parameter 'columns' is required when inserting multiple records.`);\r\n        }\r\n        columns = new ColumnSet(columns || data);\r\n    }\r\n\r\n    if (!columns.columns.length) {\r\n        throw new Error(`Cannot generate an INSERT without any columns.`);\r\n    }\r\n\r\n    if (!table) {\r\n        throw new Error(`Table name is unknown.`);\r\n    }\r\n\r\n    if (!(table instanceof TableName)) {\r\n        table = new TableName(table);\r\n    }\r\n\r\n    let query = capSQL ? sql.capCase : sql.lowCase;\r\n    const fmOptions = {capSQL};\r\n\r\n    const format = npm.formatting.as.format;\r\n    query = format(query, [table.name, columns.names], fmOptions);\r\n\r\n    if (isArray) {\r\n        return query + data.map((d, index) => {\r\n            if (!d || typeof d !== `object`) {\r\n                throw new Error(`Invalid insert object at index ${index}.`);\r\n            }\r\n            return `(` + format(columns.variables, columns.prepare(d), fmOptions) + `)`;\r\n        }).join();\r\n    }\r\n    return query + `(` + format(columns.variables, columns.prepare(data), fmOptions) + `)`;\r\n}\r\n\r\nconst sql = {\r\n    lowCase: `insert into $1^($2^) values`,\r\n    capCase: `INSERT INTO $1^($2^) VALUES`\r\n};\r\n\r\nmodule.exports = {insert};\r\n"]},"metadata":{},"sourceType":"script"}