{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  Events\n} = require(`./events`);\n\nconst npm = {\n  utils: require(`./utils`),\n  text: require(`./text`)\n}; ////////////////////////////////////////////\n// Streams query data into any destination,\n// with the help of pg-query-stream library.\n\nfunction $stream(ctx, qs, initCB, config) {\n  const $p = config.promise; // istanbul ignore next:\n  // we do not provide code coverage for the Native Bindings specifics\n\n  if (ctx.options.pgNative) {\n    return $p.reject(new Error(npm.text.nativeStreaming));\n  }\n\n  if (!qs || !qs.constructor || qs.constructor.name !== `PgQueryStream`) {\n    // stream object wasn't passed in correctly;\n    return $p.reject(new TypeError(npm.text.invalidStream));\n  }\n\n  if (qs._reading || qs._closed) {\n    // stream object is in the wrong state;\n    return $p.reject(new Error(npm.text.invalidStreamState));\n  }\n\n  if (typeof initCB !== `function`) {\n    // parameter `initCB` must be passed as the initialization callback;\n    return $p.reject(new TypeError(npm.text.invalidStreamCB));\n  }\n\n  let error = Events.query(ctx.options, getContext());\n\n  if (error) {\n    error = getError(error);\n    Events.error(ctx.options, error, getContext());\n    return $p.reject(error);\n  }\n\n  const stream = ctx.db.client.query(qs);\n  stream.on(`data`, onData);\n  stream.on(`error`, onError);\n  stream.on(`end`, onEnd);\n\n  try {\n    initCB.call(this, stream); // the stream must be initialized during the call;\n  } catch (e) {\n    release();\n    error = getError(e);\n    Events.error(ctx.options, error, getContext());\n    return $p.reject(error);\n  }\n\n  const start = Date.now();\n  let resolve,\n      reject,\n      nRows = 0;\n\n  function onData(data) {\n    nRows++;\n    error = Events.receive(ctx.options, [data], undefined, getContext());\n\n    if (error) {\n      onError(error);\n    }\n  }\n\n  function onError(e) {\n    release();\n    stream.destroy();\n    e = getError(e);\n    Events.error(ctx.options, e, getContext());\n    reject(e);\n  }\n\n  function onEnd() {\n    release();\n    resolve({\n      processed: nRows,\n      // total number of rows processed;\n      duration: Date.now() - start // duration, in milliseconds;\n\n    });\n  }\n\n  function release() {\n    stream.removeListener(`data`, onData);\n    stream.removeListener(`error`, onError);\n    stream.removeListener(`end`, onEnd);\n  }\n\n  function getError(e) {\n    return e instanceof npm.utils.InternalError ? e.error : e;\n  }\n\n  function getContext() {\n    let client;\n\n    if (ctx.db) {\n      client = ctx.db.client;\n    } else {\n      error = new Error(npm.text.looseQuery);\n    }\n\n    return {\n      client,\n      dc: ctx.dc,\n      query: qs.cursor.text,\n      params: qs.cursor.values,\n      ctx: ctx.ctx\n    };\n  }\n\n  return $p((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n}\n\nmodule.exports = $stream;","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/stream.js"],"names":["Events","require","npm","utils","text","$stream","ctx","qs","initCB","config","$p","promise","options","pgNative","reject","Error","nativeStreaming","constructor","name","TypeError","invalidStream","_reading","_closed","invalidStreamState","invalidStreamCB","error","query","getContext","getError","stream","db","client","on","onData","onError","onEnd","call","e","release","start","Date","now","resolve","nRows","data","receive","undefined","destroy","processed","duration","removeListener","InternalError","looseQuery","dc","cursor","params","values","res","rej","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {Events} = require(`./events`);\r\n\r\nconst npm = {\r\n    utils: require(`./utils`),\r\n    text: require(`./text`)\r\n};\r\n\r\n////////////////////////////////////////////\r\n// Streams query data into any destination,\r\n// with the help of pg-query-stream library.\r\nfunction $stream(ctx, qs, initCB, config) {\r\n\r\n    const $p = config.promise;\r\n\r\n    // istanbul ignore next:\r\n    // we do not provide code coverage for the Native Bindings specifics\r\n    if (ctx.options.pgNative) {\r\n        return $p.reject(new Error(npm.text.nativeStreaming));\r\n    }\r\n    if (!qs || !qs.constructor || qs.constructor.name !== `PgQueryStream`) {\r\n        // stream object wasn't passed in correctly;\r\n        return $p.reject(new TypeError(npm.text.invalidStream));\r\n    }\r\n    if (qs._reading || qs._closed) {\r\n        // stream object is in the wrong state;\r\n        return $p.reject(new Error(npm.text.invalidStreamState));\r\n    }\r\n    if (typeof initCB !== `function`) {\r\n        // parameter `initCB` must be passed as the initialization callback;\r\n        return $p.reject(new TypeError(npm.text.invalidStreamCB));\r\n    }\r\n\r\n    let error = Events.query(ctx.options, getContext());\r\n\r\n    if (error) {\r\n        error = getError(error);\r\n        Events.error(ctx.options, error, getContext());\r\n        return $p.reject(error);\r\n    }\r\n\r\n    const stream = ctx.db.client.query(qs);\r\n\r\n    stream.on(`data`, onData);\r\n    stream.on(`error`, onError);\r\n    stream.on(`end`, onEnd);\r\n\r\n    try {\r\n        initCB.call(this, stream); // the stream must be initialized during the call;\r\n    } catch (e) {\r\n        release();\r\n        error = getError(e);\r\n        Events.error(ctx.options, error, getContext());\r\n        return $p.reject(error);\r\n    }\r\n\r\n    const start = Date.now();\r\n    let resolve, reject, nRows = 0;\r\n\r\n    function onData(data) {\r\n        nRows++;\r\n        error = Events.receive(ctx.options, [data], undefined, getContext());\r\n        if (error) {\r\n            onError(error);\r\n        }\r\n    }\r\n\r\n    function onError(e) {\r\n        release();\r\n        stream.destroy();\r\n        e = getError(e);\r\n        Events.error(ctx.options, e, getContext());\r\n        reject(e);\r\n    }\r\n\r\n    function onEnd() {\r\n        release();\r\n        resolve({\r\n            processed: nRows, // total number of rows processed;\r\n            duration: Date.now() - start // duration, in milliseconds;\r\n        });\r\n    }\r\n\r\n    function release() {\r\n        stream.removeListener(`data`, onData);\r\n        stream.removeListener(`error`, onError);\r\n        stream.removeListener(`end`, onEnd);\r\n    }\r\n\r\n    function getError(e) {\r\n        return e instanceof npm.utils.InternalError ? e.error : e;\r\n    }\r\n\r\n    function getContext() {\r\n        let client;\r\n        if (ctx.db) {\r\n            client = ctx.db.client;\r\n        } else {\r\n            error = new Error(npm.text.looseQuery);\r\n        }\r\n        return {\r\n            client,\r\n            dc: ctx.dc,\r\n            query: qs.cursor.text,\r\n            params: qs.cursor.values,\r\n            ctx: ctx.ctx\r\n        };\r\n    }\r\n\r\n    return $p((res, rej) => {\r\n        resolve = res;\r\n        reject = rej;\r\n    });\r\n\r\n}\r\n\r\nmodule.exports = $stream;\r\n"]},"metadata":{},"sourceType":"script"}