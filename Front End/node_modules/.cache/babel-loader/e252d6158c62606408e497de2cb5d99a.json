{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  QueryFileError\n} = require(`./query-file-error`);\n\nconst npm = {\n  os: require(`os`),\n  utils: require(`../utils`)\n};\n/**\r\n * @class errors.ParameterizedQueryError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link ParameterizedQuery}, whether it is used\r\n * explicitly or implicitly (via a simple `{text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `ParameterizedQueryError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link ParameterizedQuery} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Parameterized Query object.\r\n *\r\n * @see ParameterizedQuery\r\n */\n\nclass ParameterizedQueryError extends Error {\n  constructor(error, pq) {\n    const isQueryFileError = error instanceof QueryFileError;\n    const message = isQueryFileError ? `Failed to initialize 'text' from a QueryFile.` : error;\n    super(message);\n    this.name = this.constructor.name;\n\n    if (isQueryFileError) {\n      this.error = error;\n    }\n\n    this.result = pq;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n/**\r\n * @method errors.ParameterizedQueryError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\n\n\nParameterizedQueryError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap0 = npm.utils.messageGap(level),\n        gap1 = npm.utils.messageGap(level + 1),\n        gap2 = npm.utils.messageGap(level + 2),\n        lines = [`ParameterizedQueryError {`, gap1 + `message: \"` + this.message + `\"`, gap1 + `result: {`, gap2 + `text: ` + npm.utils.toJson(this.result.text), gap2 + `values: ` + npm.utils.toJson(this.result.values), gap1 + `}`];\n\n  if (this.error) {\n    lines.push(gap1 + `error: ` + this.error.toString(level + 1));\n  }\n\n  lines.push(gap0 + `}`);\n  return lines.join(npm.os.EOL);\n};\n\nnpm.utils.addInspection(ParameterizedQueryError, function () {\n  return this.toString();\n});\nmodule.exports = {\n  ParameterizedQueryError\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/errors/parameterized-query-error.js"],"names":["QueryFileError","require","npm","os","utils","ParameterizedQueryError","Error","constructor","error","pq","isQueryFileError","message","name","result","captureStackTrace","prototype","toString","level","parseInt","gap0","messageGap","gap1","gap2","lines","toJson","text","values","push","join","EOL","addInspection","module","exports"],"mappings":"AAAA;;;;;;;;AASA,MAAM;AAACA,EAAAA;AAAD,IAAmBC,OAAO,CAAE,oBAAF,CAAhC;;AAEA,MAAMC,GAAG,GAAG;AACRC,EAAAA,EAAE,EAAEF,OAAO,CAAE,IAAF,CADH;AAERG,EAAAA,KAAK,EAAEH,OAAO,CAAE,UAAF;AAFN,CAAZ;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,MAAMI,uBAAN,SAAsCC,KAAtC,CAA4C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQC,EAAR,EAAY;AACnB,UAAMC,gBAAgB,GAAGF,KAAK,YAAYR,cAA1C;AACA,UAAMW,OAAO,GAAGD,gBAAgB,GAAI,+CAAJ,GAAqDF,KAArF;AACA,UAAMG,OAAN;AACA,SAAKC,IAAL,GAAY,KAAKL,WAAL,CAAiBK,IAA7B;;AACA,QAAIF,gBAAJ,EAAsB;AAClB,WAAKF,KAAL,GAAaA,KAAb;AACH;;AACD,SAAKK,MAAL,GAAcJ,EAAd;AACAH,IAAAA,KAAK,CAACQ,iBAAN,CAAwB,IAAxB,EAA8B,KAAKP,WAAnC;AACH;;AAXuC;AAc5C;;;;;;;;;;;;;;AAYAF,uBAAuB,CAACU,SAAxB,CAAkCC,QAAlC,GAA6C,UAAUC,KAAV,EAAiB;AAC1DA,EAAAA,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAYC,QAAQ,CAACD,KAAD,CAApB,GAA8B,CAAtC;AACA,QAAME,IAAI,GAAGjB,GAAG,CAACE,KAAJ,CAAUgB,UAAV,CAAqBH,KAArB,CAAb;AAAA,QACII,IAAI,GAAGnB,GAAG,CAACE,KAAJ,CAAUgB,UAAV,CAAqBH,KAAK,GAAG,CAA7B,CADX;AAAA,QAEIK,IAAI,GAAGpB,GAAG,CAACE,KAAJ,CAAUgB,UAAV,CAAqBH,KAAK,GAAG,CAA7B,CAFX;AAAA,QAGIM,KAAK,GAAG,CACH,2BADG,EAEJF,IAAI,GAAI,YAAR,GAAsB,KAAKV,OAA3B,GAAsC,GAFlC,EAGJU,IAAI,GAAI,WAHJ,EAIJC,IAAI,GAAI,QAAR,GAAkBpB,GAAG,CAACE,KAAJ,CAAUoB,MAAV,CAAiB,KAAKX,MAAL,CAAYY,IAA7B,CAJd,EAKJH,IAAI,GAAI,UAAR,GAAoBpB,GAAG,CAACE,KAAJ,CAAUoB,MAAV,CAAiB,KAAKX,MAAL,CAAYa,MAA7B,CALhB,EAMJL,IAAI,GAAI,GANJ,CAHZ;;AAWA,MAAI,KAAKb,KAAT,EAAgB;AACZe,IAAAA,KAAK,CAACI,IAAN,CAAWN,IAAI,GAAI,SAAR,GAAmB,KAAKb,KAAL,CAAWQ,QAAX,CAAoBC,KAAK,GAAG,CAA5B,CAA9B;AACH;;AACDM,EAAAA,KAAK,CAACI,IAAN,CAAWR,IAAI,GAAI,GAAnB;AACA,SAAOI,KAAK,CAACK,IAAN,CAAW1B,GAAG,CAACC,EAAJ,CAAO0B,GAAlB,CAAP;AACH,CAlBD;;AAoBA3B,GAAG,CAACE,KAAJ,CAAU0B,aAAV,CAAwBzB,uBAAxB,EAAiD,YAAY;AACzD,SAAO,KAAKW,QAAL,EAAP;AACH,CAFD;AAIAe,MAAM,CAACC,OAAP,GAAiB;AAAC3B,EAAAA;AAAD,CAAjB","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {QueryFileError} = require(`./query-file-error`);\r\n\r\nconst npm = {\r\n    os: require(`os`),\r\n    utils: require(`../utils`)\r\n};\r\n\r\n/**\r\n * @class errors.ParameterizedQueryError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError} class, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link ParameterizedQuery}, whether it is used\r\n * explicitly or implicitly (via a simple `{text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `ParameterizedQueryError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link ParameterizedQuery} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Parameterized Query object.\r\n *\r\n * @see ParameterizedQuery\r\n */\r\nclass ParameterizedQueryError extends Error {\r\n    constructor(error, pq) {\r\n        const isQueryFileError = error instanceof QueryFileError;\r\n        const message = isQueryFileError ? `Failed to initialize 'text' from a QueryFile.` : error;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        if (isQueryFileError) {\r\n            this.error = error;\r\n        }\r\n        this.result = pq;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n/**\r\n * @method errors.ParameterizedQueryError#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nParameterizedQueryError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap0 = npm.utils.messageGap(level),\r\n        gap1 = npm.utils.messageGap(level + 1),\r\n        gap2 = npm.utils.messageGap(level + 2),\r\n        lines = [\r\n            `ParameterizedQueryError {`,\r\n            gap1 + `message: \"` + this.message + `\"`,\r\n            gap1 + `result: {`,\r\n            gap2 + `text: ` + npm.utils.toJson(this.result.text),\r\n            gap2 + `values: ` + npm.utils.toJson(this.result.values),\r\n            gap1 + `}`\r\n        ];\r\n    if (this.error) {\r\n        lines.push(gap1 + `error: ` + this.error.toString(level + 1));\r\n    }\r\n    lines.push(gap0 + `}`);\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(ParameterizedQueryError, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {ParameterizedQueryError};\r\n"]},"metadata":{},"sourceType":"script"}