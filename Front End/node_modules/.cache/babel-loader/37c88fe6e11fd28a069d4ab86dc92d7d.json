{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  ColorConsole\n} = require(`./utils/color`);\n\nconst npm = {\n  utils: require(`./utils`)\n};\n/**\r\n * @class DatabasePool\r\n * @static\r\n * @private\r\n */\n\nclass DatabasePool {\n  /**\r\n   * @method DatabasePool.register\r\n   * @static\r\n   * @description\r\n   *  - Registers each database object, to make sure no duplicates connections are used,\r\n   *    and if they are, produce a warning;\r\n   *  - Registers each Pool object, to be able to release them all when requested.\r\n   *\r\n   * @param {Database} db - The new Database object being registered.\r\n   */\n  static register(db) {\n    const cnKey = DatabasePool.createContextKey(db);\n    npm.utils.addReadProp(db, `$cnKey`, cnKey, true);\n\n    if (cnKey in DatabasePool.dbMap) {\n      DatabasePool.dbMap[cnKey]++;\n      /* istanbul ignore if */\n\n      if (!db.$config.options.noWarnings) {\n        ColorConsole.warn(`WARNING: Creating a duplicate database object for the same connection.\\n${npm.utils.getLocalStack(4, 3)}\\n`);\n      }\n    } else {\n      DatabasePool.dbMap[cnKey] = 1;\n    }\n\n    DatabasePool.dbs.push(db);\n  }\n  /**\r\n   * @method DatabasePool.unregister\r\n   * @static\r\n   * @param db\r\n   */\n\n\n  static unregister(db) {\n    const cnKey = db.$cnKey;\n\n    if (! --DatabasePool.dbMap[cnKey]) {\n      delete DatabasePool.dbMap[cnKey];\n    }\n  }\n  /**\r\n   * @method DatabasePool.shutDown\r\n   * @static\r\n   */\n\n\n  static shutDown() {\n    DatabasePool.dbs.forEach(db => {\n      db.$destroy();\n    });\n    DatabasePool.dbs.length = 0;\n    DatabasePool.dbMap = {};\n  }\n  /**\r\n   * @method DatabasePool.createContextKey\r\n   * @static\r\n   * @description\r\n   * For connections that are objects it reorders the keys alphabetically,\r\n   * and then serializes the result into a JSON string.\r\n   *\r\n   * @param {Database} db - Database instance.\r\n   */\n\n\n  static createContextKey(db) {\n    let cn = db.$cn;\n\n    if (typeof cn === `object`) {\n      const obj = {},\n            keys = Object.keys(cn).sort();\n      keys.forEach(name => {\n        obj[name] = cn[name];\n      });\n      cn = obj;\n    }\n\n    return npm.utils.toJson(npm.utils.getSafeConnection(cn)) + npm.utils.toJson(db.$dc);\n  }\n\n} /////////////////////\n// Static Properties:\n\n\nDatabasePool.dbMap = {}; // map of used database context keys (connection + dc)\n\nDatabasePool.dbs = []; // all database objects\n\nmodule.exports = {\n  DatabasePool\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/database-pool.js"],"names":["ColorConsole","require","npm","utils","DatabasePool","register","db","cnKey","createContextKey","addReadProp","dbMap","$config","options","noWarnings","warn","getLocalStack","dbs","push","unregister","$cnKey","shutDown","forEach","$destroy","length","cn","$cn","obj","keys","Object","sort","name","toJson","getSafeConnection","$dc","module","exports"],"mappings":"AAAA;;;;;;;;AASA,MAAM;AAACA,EAAAA;AAAD,IAAiBC,OAAO,CAAE,eAAF,CAA9B;;AAEA,MAAMC,GAAG,GAAG;AACRC,EAAAA,KAAK,EAAEF,OAAO,CAAE,SAAF;AADN,CAAZ;AAIA;;;;;;AAKA,MAAMG,YAAN,CAAmB;AAEf;;;;;;;;;;AAUA,SAAOC,QAAP,CAAgBC,EAAhB,EAAoB;AAChB,UAAMC,KAAK,GAAGH,YAAY,CAACI,gBAAb,CAA8BF,EAA9B,CAAd;AACAJ,IAAAA,GAAG,CAACC,KAAJ,CAAUM,WAAV,CAAsBH,EAAtB,EAA2B,QAA3B,EAAoCC,KAApC,EAA2C,IAA3C;;AACA,QAAIA,KAAK,IAAIH,YAAY,CAACM,KAA1B,EAAiC;AAC7BN,MAAAA,YAAY,CAACM,KAAb,CAAmBH,KAAnB;AACA;;AACA,UAAI,CAACD,EAAE,CAACK,OAAH,CAAWC,OAAX,CAAmBC,UAAxB,EAAoC;AAChCb,QAAAA,YAAY,CAACc,IAAb,CAAmB,2EAA0EZ,GAAG,CAACC,KAAJ,CAAUY,aAAV,CAAwB,CAAxB,EAA2B,CAA3B,CAA8B,IAA3H;AACH;AACJ,KAND,MAMO;AACHX,MAAAA,YAAY,CAACM,KAAb,CAAmBH,KAAnB,IAA4B,CAA5B;AACH;;AACDH,IAAAA,YAAY,CAACY,GAAb,CAAiBC,IAAjB,CAAsBX,EAAtB;AACH;AAED;;;;;;;AAKA,SAAOY,UAAP,CAAkBZ,EAAlB,EAAsB;AAClB,UAAMC,KAAK,GAAGD,EAAE,CAACa,MAAjB;;AACA,QAAI,CAAC,GAAEf,YAAY,CAACM,KAAb,CAAmBH,KAAnB,CAAP,EAAkC;AAC9B,aAAOH,YAAY,CAACM,KAAb,CAAmBH,KAAnB,CAAP;AACH;AACJ;AAED;;;;;;AAIA,SAAOa,QAAP,GAAkB;AACdhB,IAAAA,YAAY,CAACY,GAAb,CAAiBK,OAAjB,CAAyBf,EAAE,IAAI;AAC3BA,MAAAA,EAAE,CAACgB,QAAH;AACH,KAFD;AAGAlB,IAAAA,YAAY,CAACY,GAAb,CAAiBO,MAAjB,GAA0B,CAA1B;AACAnB,IAAAA,YAAY,CAACM,KAAb,GAAqB,EAArB;AACH;AAED;;;;;;;;;;;AASA,SAAOF,gBAAP,CAAwBF,EAAxB,EAA4B;AACxB,QAAIkB,EAAE,GAAGlB,EAAE,CAACmB,GAAZ;;AACA,QAAI,OAAOD,EAAP,KAAe,QAAnB,EAA4B;AACxB,YAAME,GAAG,GAAG,EAAZ;AAAA,YAAgBC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,EAAZ,EAAgBK,IAAhB,EAAvB;AACAF,MAAAA,IAAI,CAACN,OAAL,CAAaS,IAAI,IAAI;AACjBJ,QAAAA,GAAG,CAACI,IAAD,CAAH,GAAYN,EAAE,CAACM,IAAD,CAAd;AACH,OAFD;AAGAN,MAAAA,EAAE,GAAGE,GAAL;AACH;;AACD,WAAOxB,GAAG,CAACC,KAAJ,CAAU4B,MAAV,CAAiB7B,GAAG,CAACC,KAAJ,CAAU6B,iBAAV,CAA4BR,EAA5B,CAAjB,IAAoDtB,GAAG,CAACC,KAAJ,CAAU4B,MAAV,CAAiBzB,EAAE,CAAC2B,GAApB,CAA3D;AACH;;AAtEc,C,CAyEnB;AACA;;;AACA7B,YAAY,CAACM,KAAb,GAAqB,EAArB,C,CAAyB;;AACzBN,YAAY,CAACY,GAAb,GAAmB,EAAnB,C,CAAuB;;AAEvBkB,MAAM,CAACC,OAAP,GAAiB;AAAC/B,EAAAA;AAAD,CAAjB","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ColorConsole} = require(`./utils/color`);\r\n\r\nconst npm = {\r\n    utils: require(`./utils`)\r\n};\r\n\r\n/**\r\n * @class DatabasePool\r\n * @static\r\n * @private\r\n */\r\nclass DatabasePool {\r\n\r\n    /**\r\n     * @method DatabasePool.register\r\n     * @static\r\n     * @description\r\n     *  - Registers each database object, to make sure no duplicates connections are used,\r\n     *    and if they are, produce a warning;\r\n     *  - Registers each Pool object, to be able to release them all when requested.\r\n     *\r\n     * @param {Database} db - The new Database object being registered.\r\n     */\r\n    static register(db) {\r\n        const cnKey = DatabasePool.createContextKey(db);\r\n        npm.utils.addReadProp(db, `$cnKey`, cnKey, true);\r\n        if (cnKey in DatabasePool.dbMap) {\r\n            DatabasePool.dbMap[cnKey]++;\r\n            /* istanbul ignore if */\r\n            if (!db.$config.options.noWarnings) {\r\n                ColorConsole.warn(`WARNING: Creating a duplicate database object for the same connection.\\n${npm.utils.getLocalStack(4, 3)}\\n`);\r\n            }\r\n        } else {\r\n            DatabasePool.dbMap[cnKey] = 1;\r\n        }\r\n        DatabasePool.dbs.push(db);\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.unregister\r\n     * @static\r\n     * @param db\r\n     */\r\n    static unregister(db) {\r\n        const cnKey = db.$cnKey;\r\n        if (!--DatabasePool.dbMap[cnKey]) {\r\n            delete DatabasePool.dbMap[cnKey];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.shutDown\r\n     * @static\r\n     */\r\n    static shutDown() {\r\n        DatabasePool.dbs.forEach(db => {\r\n            db.$destroy();\r\n        });\r\n        DatabasePool.dbs.length = 0;\r\n        DatabasePool.dbMap = {};\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.createContextKey\r\n     * @static\r\n     * @description\r\n     * For connections that are objects it reorders the keys alphabetically,\r\n     * and then serializes the result into a JSON string.\r\n     *\r\n     * @param {Database} db - Database instance.\r\n     */\r\n    static createContextKey(db) {\r\n        let cn = db.$cn;\r\n        if (typeof cn === `object`) {\r\n            const obj = {}, keys = Object.keys(cn).sort();\r\n            keys.forEach(name => {\r\n                obj[name] = cn[name];\r\n            });\r\n            cn = obj;\r\n        }\r\n        return npm.utils.toJson(npm.utils.getSafeConnection(cn)) + npm.utils.toJson(db.$dc);\r\n    }\r\n}\r\n\r\n/////////////////////\r\n// Static Properties:\r\nDatabasePool.dbMap = {}; // map of used database context keys (connection + dc)\r\nDatabasePool.dbs = []; // all database objects\r\n\r\nmodule.exports = {DatabasePool};\r\n"]},"metadata":{},"sourceType":"script"}