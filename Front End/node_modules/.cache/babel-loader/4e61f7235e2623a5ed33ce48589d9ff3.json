{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  PromiseAdapter\n} = require(`./promise-adapter`); //////////////////////////////////////////\n// Parses and validates a promise library;\n\n\nfunction parse(pl) {\n  let promise;\n\n  if (pl instanceof PromiseAdapter) {\n    promise = function (func) {\n      return pl.create(func);\n    };\n\n    promise.resolve = pl.resolve;\n    promise.reject = pl.reject;\n    promise.all = pl.all;\n    return promise;\n  }\n\n  const t = typeof pl;\n\n  if (t === `function` || t === `object`) {\n    const Root = typeof pl.Promise === `function` ? pl.Promise : pl;\n\n    promise = function (func) {\n      return new Root(func);\n    };\n\n    promise.resolve = Root.resolve;\n    promise.reject = Root.reject;\n    promise.all = Root.all;\n\n    if (typeof promise.resolve === `function` && typeof promise.reject === `function` && typeof promise.all === `function`) {\n      return promise;\n    }\n  }\n\n  throw new TypeError(`Invalid promise library specified.`);\n}\n\nfunction parsePromise(promiseLib) {\n  const result = {\n    promiseLib\n  };\n\n  if (promiseLib) {\n    result.promise = parse(promiseLib);\n  } else {\n    result.promise = parse(Promise);\n    result.promiseLib = Promise;\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  parsePromise\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/promise-parser.js"],"names":["PromiseAdapter","require","parse","pl","promise","func","create","resolve","reject","all","t","Root","Promise","TypeError","parsePromise","promiseLib","result","module","exports"],"mappings":"AAAA;;;;;;;;AASA,MAAM;AAACA,EAAAA;AAAD,IAAmBC,OAAO,CAAE,mBAAF,CAAhC,C,CAEA;AACA;;;AACA,SAASC,KAAT,CAAeC,EAAf,EAAmB;AAEf,MAAIC,OAAJ;;AACA,MAAID,EAAE,YAAYH,cAAlB,EAAkC;AAC9BI,IAAAA,OAAO,GAAG,UAAUC,IAAV,EAAgB;AACtB,aAAOF,EAAE,CAACG,MAAH,CAAUD,IAAV,CAAP;AACH,KAFD;;AAGAD,IAAAA,OAAO,CAACG,OAAR,GAAkBJ,EAAE,CAACI,OAArB;AACAH,IAAAA,OAAO,CAACI,MAAR,GAAiBL,EAAE,CAACK,MAApB;AACAJ,IAAAA,OAAO,CAACK,GAAR,GAAcN,EAAE,CAACM,GAAjB;AACA,WAAOL,OAAP;AACH;;AACD,QAAMM,CAAC,GAAG,OAAOP,EAAjB;;AACA,MAAIO,CAAC,KAAM,UAAP,IAAoBA,CAAC,KAAM,QAA/B,EAAwC;AACpC,UAAMC,IAAI,GAAG,OAAOR,EAAE,CAACS,OAAV,KAAuB,UAAvB,GAAmCT,EAAE,CAACS,OAAtC,GAAgDT,EAA7D;;AACAC,IAAAA,OAAO,GAAG,UAAUC,IAAV,EAAgB;AACtB,aAAO,IAAIM,IAAJ,CAASN,IAAT,CAAP;AACH,KAFD;;AAGAD,IAAAA,OAAO,CAACG,OAAR,GAAkBI,IAAI,CAACJ,OAAvB;AACAH,IAAAA,OAAO,CAACI,MAAR,GAAiBG,IAAI,CAACH,MAAtB;AACAJ,IAAAA,OAAO,CAACK,GAAR,GAAcE,IAAI,CAACF,GAAnB;;AACA,QAAI,OAAOL,OAAO,CAACG,OAAf,KAA4B,UAA5B,IACA,OAAOH,OAAO,CAACI,MAAf,KAA2B,UAD3B,IAEA,OAAOJ,OAAO,CAACK,GAAf,KAAwB,UAF5B,EAEuC;AACnC,aAAOL,OAAP;AACH;AACJ;;AAED,QAAM,IAAIS,SAAJ,CAAe,oCAAf,CAAN;AACH;;AAED,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAC9B,QAAMC,MAAM,GAAG;AAACD,IAAAA;AAAD,GAAf;;AACA,MAAIA,UAAJ,EAAgB;AACZC,IAAAA,MAAM,CAACZ,OAAP,GAAiBF,KAAK,CAACa,UAAD,CAAtB;AACH,GAFD,MAEO;AACHC,IAAAA,MAAM,CAACZ,OAAP,GAAiBF,KAAK,CAACU,OAAD,CAAtB;AACAI,IAAAA,MAAM,CAACD,UAAP,GAAoBH,OAApB;AACH;;AACD,SAAOI,MAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAACJ,EAAAA;AAAD,CAAjB","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {PromiseAdapter} = require(`./promise-adapter`);\r\n\r\n//////////////////////////////////////////\r\n// Parses and validates a promise library;\r\nfunction parse(pl) {\r\n\r\n    let promise;\r\n    if (pl instanceof PromiseAdapter) {\r\n        promise = function (func) {\r\n            return pl.create(func);\r\n        };\r\n        promise.resolve = pl.resolve;\r\n        promise.reject = pl.reject;\r\n        promise.all = pl.all;\r\n        return promise;\r\n    }\r\n    const t = typeof pl;\r\n    if (t === `function` || t === `object`) {\r\n        const Root = typeof pl.Promise === `function` ? pl.Promise : pl;\r\n        promise = function (func) {\r\n            return new Root(func);\r\n        };\r\n        promise.resolve = Root.resolve;\r\n        promise.reject = Root.reject;\r\n        promise.all = Root.all;\r\n        if (typeof promise.resolve === `function` &&\r\n            typeof promise.reject === `function` &&\r\n            typeof promise.all === `function`) {\r\n            return promise;\r\n        }\r\n    }\r\n\r\n    throw new TypeError(`Invalid promise library specified.`);\r\n}\r\n\r\nfunction parsePromise(promiseLib) {\r\n    const result = {promiseLib};\r\n    if (promiseLib) {\r\n        result.promise = parse(promiseLib);\r\n    } else {\r\n        result.promise = parse(Promise);\r\n        result.promiseLib = Promise;\r\n    }\r\n    return result;\r\n}\r\n\r\nmodule.exports = {parsePromise};\r\n"]},"metadata":{},"sourceType":"script"}