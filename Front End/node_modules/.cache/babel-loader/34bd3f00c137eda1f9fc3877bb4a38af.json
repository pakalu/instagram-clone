{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  PromiseAdapter\n} = require(`./promise-adapter`);\n\nconst {\n  DatabasePool\n} = require(`./database-pool`);\n\nconst {\n  PreparedStatement,\n  ParameterizedQuery\n} = require(`./types`);\n\nconst {\n  QueryFile\n} = require(`./query-file`);\n\nconst {\n  queryResult\n} = require(`./query-result`);\n\nconst {\n  parsePromise\n} = require(`./promise-parser`);\n\nconst {\n  assertOptions\n} = require(`assert-options`);\n\nconst npm = {\n  path: require(`path`),\n  pg: require(`pg`),\n  minify: require(`pg-minify`),\n  formatting: require(`./formatting`),\n  helpers: require(`./helpers`),\n  errors: require(`./errors`),\n  utils: require(`./utils`),\n  pubUtils: require(`./utils/public`),\n  mode: require(`./tx-mode`),\n  package: require(`../package.json`),\n  text: require(`./text`)\n};\nlet originalClientConnect;\n/**\r\n * @author Vitaly Tomilov\r\n * @module pg-promise\r\n *\r\n * @description\r\n * ## pg-promise v10\r\n * All documentation here is for the latest official release only.\r\n *\r\n * ### Initialization Options\r\n *\r\n * Below is the complete list of _Initialization Options_ for the library that can be passed in during\r\n * the library's initialization:\r\n *\r\n * ```js\r\n * const initOptions = {&#47;* options as documented below *&#47;};\r\n *\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * @param {object} [options]\r\n * Library Initialization Options.\r\n *\r\n * @param {boolean} [options.pgFormatting=false]\r\n * Redirects all query formatting to the $[pg] driver.\r\n *\r\n * By default (`false`), the library uses its own advanced query-formatting engine.\r\n * If you set this option to a truthy value, query formatting will be done entirely by the\r\n * $[pg] driver, which means you won't be able to use any of the feature-rich query formatting\r\n * that this library implements, restricting yourself to the very basic `$1, $2,...` syntax.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {boolean} [options.pgNative=false]\r\n * Use $[Native Bindings]. Library $[pg-native] must be included and installed independently, or else there will\r\n * be an error thrown: {@link external:Error Error} = `Failed to initialize Native Bindings.`\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @param {object|function} [options.promiseLib=Promise]\r\n * Overrides the default (ES6 Promise) promise library for its internal use.\r\n *\r\n * Example below sets to use $[Bluebird] - the best and recommended promise library. It is the fastest one,\r\n * and supports $[Long Stack Traces], essential for debugging promises.\r\n *\r\n * ```js\r\n * const Promise = require('bluebird');\r\n * const initOptions = {\r\n *     promiseLib: Promise\r\n * };\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * All existing promise libraries are supported. The ones with recognizable signature are used automatically,\r\n * while the rest can be configured via the $[Promise Adapter].\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @param {boolean} [options.noLocking=false]\r\n * Prevents protocol locking.\r\n *\r\n * By default, the library locks much of its protocol to read-only access, as a fool-proof mechanism.\r\n * Specifically for the {@link event:extend extend} event this serves as a protection against overriding existing\r\n * properties or trying to set them at the wrong time.\r\n *\r\n * If this provision gets in the way of using a mock-up framework for your tests, you can force\r\n * the library to deactivate most of the locks by setting `noLocking` = `true` within the options.\r\n *\r\n * This option is dynamic (can be set before or after initialization). However, changing it after the library's\r\n * initialization will not affect {@link Database} objects that have already been created.\r\n *\r\n * @param {boolean} [options.capSQL=false]\r\n * Capitalizes any SQL generated by the library.\r\n *\r\n * By default, all internal SQL within the library is generated using the low case.\r\n * If, however, you want all SQL to be capitalized instead, set `capSQL` = `true`.\r\n *\r\n * It is purely a cosmetic feature.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {string|Array<string>|null|undefined|function} [options.schema]\r\n * Forces change of the default database schema(s) for every fresh connection, i.e.\r\n * the library will execute `SET search_path TO schema_1, schema_2, ...` in the background\r\n * whenever a fresh physical connection is allocated.\r\n *\r\n * Normally, one changes the default schema(s) by $[changing the database or the role], but sometimes you\r\n * may want to switch the default schema(s) without persisting the change, and then use this option.\r\n *\r\n * It can be a string, an array of strings, or a callback function that takes `dc` (database context)\r\n * as the only parameter (and as `this`), and returns schema(s) according to the database context. A callback function\r\n * can also return nothing (`undefined` or `null`), if no schema change needed for the specified database context.\r\n *\r\n * The order of schema names matters, so if a table name exists in more than one schema, its default access resolves\r\n * to the table from the first such schema on the list.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {boolean} [options.noWarnings=false]\r\n * Disables all diagnostic warnings in the library (it is ill-advised).\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.connect]\r\n * Global event {@link event:connect connect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.disconnect]\r\n * Global event {@link event:disconnect disconnect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.query]\r\n * Global event {@link event:query query} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.receive]\r\n * Global event {@link event:receive receive} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.task]\r\n * Global event {@link event:task task} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.transact]\r\n * Global event {@link event:transact transact} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.error]\r\n * Global event {@link event:error error} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.extend]\r\n * Global event {@link event:extend extend} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @see\r\n * {@link module:pg-promise~end end},\r\n * {@link module:pg-promise~as as},\r\n * {@link module:pg-promise~errors errors},\r\n * {@link module:pg-promise~helpers helpers},\r\n * {@link module:pg-promise~minify minify},\r\n * {@link module:pg-promise~ParameterizedQuery ParameterizedQuery},\r\n * {@link module:pg-promise~PreparedStatement PreparedStatement},\r\n * {@link module:pg-promise~pg pg},\r\n * {@link module:pg-promise~QueryFile QueryFile},\r\n * {@link module:pg-promise~queryResult queryResult},\r\n * {@link module:pg-promise~spex spex},\r\n * {@link module:pg-promise~txMode txMode},\r\n * {@link module:pg-promise~utils utils}\r\n *\r\n */\n\nfunction $main(options) {\n  options = assertOptions(options, [`pgFormatting`, `pgNative`, `promiseLib`, `noLocking`, `capSQL`, `noWarnings`, `connect`, `disconnect`, `query`, `receive`, `task`, `transact`, `error`, `extend`, `schema`]);\n  let pg = npm.pg;\n  const p = parsePromise(options.promiseLib);\n  const config = {\n    version: npm.package.version,\n    promiseLib: p.promiseLib,\n    promise: p.promise\n  };\n  npm.utils.addReadProp(config, `$npm`, {}, true); // Locking properties that cannot be changed later:\n\n  npm.utils.addReadProp(options, `promiseLib`, options.promiseLib);\n  npm.utils.addReadProp(options, `pgNative`, !!options.pgNative);\n  config.options = options; // istanbul ignore next:\n  // we do not cover code specific to Native Bindings\n\n  if (options.pgNative) {\n    pg = npm.pg.native;\n\n    if (npm.utils.isNull(pg)) {\n      throw new Error(npm.text.nativeError);\n    }\n  } else {\n    if (!originalClientConnect) {\n      originalClientConnect = pg.Client.prototype.connect;\n\n      pg.Client.prototype.connect = function () {\n        const handler = msg => {\n          if (msg.parameterName === `server_version`) {\n            this.serverVersion = msg.parameterValue;\n            this.connection.removeListener(`parameterStatus`, handler);\n          }\n        };\n\n        this.connection.on(`parameterStatus`, handler);\n        originalClientConnect.call(this, ...arguments);\n      };\n    }\n  }\n\n  const Database = require(`./database`)(config);\n\n  const inst = (cn, dc) => {\n    if (npm.utils.isText(cn) || cn && typeof cn === `object`) {\n      return new Database(cn, dc, config);\n    }\n\n    throw new TypeError(`Invalid connection details: ` + npm.utils.toJson(cn));\n  };\n\n  npm.utils.addReadProperties(inst, rootNameSpace);\n  /**\r\n   * @member {external:PG} pg\r\n   * @readonly\r\n   * @description\r\n   * Instance of the $[pg] library that's being used, depending on initialization option `pgNative`:\r\n   *  - regular `pg` module instance, without option `pgNative`, or equal to `false` (default)\r\n   *  - `pg` module instance with $[Native Bindings], if option `pgNative` was set.\r\n   *\r\n   * Available as `pgp.pg`, after initializing the library.\r\n   */\n\n  npm.utils.addReadProp(inst, `pg`, pg);\n  /**\r\n   * @member {function} end\r\n   * @readonly\r\n   * @description\r\n   * Shuts down all connection pools created in the process, so it can terminate without delay.\r\n   * It is available as `pgp.end`, after initializing the library.\r\n   *\r\n   * All {@link Database} objects created previously can no longer be used, and their query methods will be rejecting\r\n   * with {@link external:Error Error} = `Connection pool of the database object has been destroyed.`\r\n   *\r\n   * And if you want to shut down only a specific connection pool, you do so via the {@link Database}\r\n   * object that owns the pool: `db.$pool.end()` (see {@link Database#$pool Database.$pool}).\r\n   *\r\n   * For more details see $[Library de-initialization].\r\n   */\n\n  npm.utils.addReadProp(inst, `end`, () => {\n    DatabasePool.shutDown();\n  });\n  /**\r\n   * @member {helpers} helpers\r\n   * @readonly\r\n   * @description\r\n   * Namespace for {@link helpers all query-formatting helper functions}.\r\n   *\r\n   * Available as `pgp.helpers`, after initializing the library.\r\n   *\r\n   * @see {@link helpers}.\r\n   */\n\n  npm.utils.addReadProp(inst, `helpers`, npm.helpers(config));\n  /**\r\n   * @member {external:spex} spex\r\n   * @readonly\r\n   * @description\r\n   * Initialized instance of the $[spex] module, used by the library within tasks and transactions.\r\n   *\r\n   * Available as `pgp.spex`, after initializing the library.\r\n   *\r\n   * @see\r\n   * {@link Task#batch},\r\n   * {@link Task#page},\r\n   * {@link Task#sequence}\r\n   */\n\n  npm.utils.addReadProp(inst, `spex`, config.$npm.spex);\n  config.pgp = inst;\n  npm.utils.lock(config, true, options);\n  return inst;\n}\n\nconst rootNameSpace = {\n  /**\r\n   * @member {formatting} as\r\n   * @readonly\r\n   * @description\r\n   * Namespace for {@link formatting all query-formatting functions}.\r\n   *\r\n   * Available as `pgp.as`, before and after initializing the library.\r\n   *\r\n   * @see {@link formatting}.\r\n   */\n  as: npm.formatting.as,\n\n  /**\r\n   * @member {external:pg-minify} minify\r\n   * @readonly\r\n   * @description\r\n   * Instance of the $[pg-minify] library used internally to minify SQL scripts.\r\n   *\r\n   * Available as `pgp.minify`, before and after initializing the library.\r\n   */\n  minify: npm.minify,\n\n  /**\r\n   * @member {queryResult} queryResult\r\n   * @readonly\r\n   * @description\r\n   * Query Result Mask enumerator.\r\n   *\r\n   * Available as `pgp.queryResult`, before and after initializing the library.\r\n   */\n  queryResult,\n\n  /**\r\n   * @member {PromiseAdapter} PromiseAdapter\r\n   * @readonly\r\n   * @description\r\n   * {@link PromiseAdapter} class.\r\n   *\r\n   * Available as `pgp.PromiseAdapter`, before and after initializing the library.\r\n   */\n  PromiseAdapter,\n\n  /**\r\n   * @member {ParameterizedQuery} ParameterizedQuery\r\n   * @readonly\r\n   * @description\r\n   * {@link ParameterizedQuery} class.\r\n   *\r\n   * Available as `pgp.ParameterizedQuery`, before and after initializing the library.\r\n   */\n  ParameterizedQuery,\n\n  /**\r\n   * @member {PreparedStatement} PreparedStatement\r\n   * @readonly\r\n   * @description\r\n   * {@link PreparedStatement} class.\r\n   *\r\n   * Available as `pgp.PreparedStatement`, before and after initializing the library.\r\n   */\n  PreparedStatement,\n\n  /**\r\n   * @member {QueryFile} QueryFile\r\n   * @readonly\r\n   * @description\r\n   * {@link QueryFile} class.\r\n   *\r\n   * Available as `pgp.QueryFile`, before and after initializing the library.\r\n   */\n  QueryFile,\n\n  /**\r\n   * @member {errors} errors\r\n   * @readonly\r\n   * @description\r\n   * {@link errors} - namespace for all error types.\r\n   *\r\n   * Available as `pgp.errors`, before and after initializing the library.\r\n   */\n  errors: npm.errors,\n\n  /**\r\n   * @member {utils} utils\r\n   * @readonly\r\n   * @description\r\n   * {@link utils} - namespace for utility functions.\r\n   *\r\n   * Available as `pgp.utils`, before and after initializing the library.\r\n   */\n  utils: npm.pubUtils,\n\n  /**\r\n   * @member {txMode} txMode\r\n   * @readonly\r\n   * @description\r\n   * {@link txMode Transaction Mode} namespace.\r\n   *\r\n   * Available as `pgp.txMode`, before and after initializing the library.\r\n   */\n  txMode: npm.mode\n};\nnpm.utils.addReadProperties($main, rootNameSpace);\nmodule.exports = $main;\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\n\n/**\r\n * @external PG\r\n * @see https://node-postgres.com\r\n */\n\n/**\r\n * @external Client\r\n * @see https://node-postgres.com/api/client\r\n */\n\n/**\r\n * @external pg-minify\r\n * @see https://github.com/vitaly-t/pg-minify\r\n */\n\n/**\r\n * @external spex\r\n * @see https://github.com/vitaly-t/spex\r\n */","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/main.js"],"names":["PromiseAdapter","require","DatabasePool","PreparedStatement","ParameterizedQuery","QueryFile","queryResult","parsePromise","assertOptions","npm","path","pg","minify","formatting","helpers","errors","utils","pubUtils","mode","package","text","originalClientConnect","$main","options","p","promiseLib","config","version","promise","addReadProp","pgNative","native","isNull","Error","nativeError","Client","prototype","connect","handler","msg","parameterName","serverVersion","parameterValue","connection","removeListener","on","call","arguments","Database","inst","cn","dc","isText","TypeError","toJson","addReadProperties","rootNameSpace","shutDown","$npm","spex","pgp","lock","as","txMode","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {PromiseAdapter} = require(`./promise-adapter`);\r\nconst {DatabasePool} = require(`./database-pool`);\r\nconst {PreparedStatement, ParameterizedQuery} = require(`./types`);\r\nconst {QueryFile} = require(`./query-file`);\r\nconst {queryResult} = require(`./query-result`);\r\nconst {parsePromise} = require(`./promise-parser`);\r\nconst {assertOptions} = require(`assert-options`);\r\n\r\nconst npm = {\r\n    path: require(`path`),\r\n    pg: require(`pg`),\r\n    minify: require(`pg-minify`),\r\n    formatting: require(`./formatting`),\r\n    helpers: require(`./helpers`),\r\n    errors: require(`./errors`),\r\n    utils: require(`./utils`),\r\n    pubUtils: require(`./utils/public`),\r\n    mode: require(`./tx-mode`),\r\n    package: require(`../package.json`),\r\n    text: require(`./text`)\r\n};\r\n\r\nlet originalClientConnect;\r\n\r\n/**\r\n * @author Vitaly Tomilov\r\n * @module pg-promise\r\n *\r\n * @description\r\n * ## pg-promise v10\r\n * All documentation here is for the latest official release only.\r\n *\r\n * ### Initialization Options\r\n *\r\n * Below is the complete list of _Initialization Options_ for the library that can be passed in during\r\n * the library's initialization:\r\n *\r\n * ```js\r\n * const initOptions = {&#47;* options as documented below *&#47;};\r\n *\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * @param {object} [options]\r\n * Library Initialization Options.\r\n *\r\n * @param {boolean} [options.pgFormatting=false]\r\n * Redirects all query formatting to the $[pg] driver.\r\n *\r\n * By default (`false`), the library uses its own advanced query-formatting engine.\r\n * If you set this option to a truthy value, query formatting will be done entirely by the\r\n * $[pg] driver, which means you won't be able to use any of the feature-rich query formatting\r\n * that this library implements, restricting yourself to the very basic `$1, $2,...` syntax.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {boolean} [options.pgNative=false]\r\n * Use $[Native Bindings]. Library $[pg-native] must be included and installed independently, or else there will\r\n * be an error thrown: {@link external:Error Error} = `Failed to initialize Native Bindings.`\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @param {object|function} [options.promiseLib=Promise]\r\n * Overrides the default (ES6 Promise) promise library for its internal use.\r\n *\r\n * Example below sets to use $[Bluebird] - the best and recommended promise library. It is the fastest one,\r\n * and supports $[Long Stack Traces], essential for debugging promises.\r\n *\r\n * ```js\r\n * const Promise = require('bluebird');\r\n * const initOptions = {\r\n *     promiseLib: Promise\r\n * };\r\n * const pgp = require('pg-promise')(initOptions);\r\n * ```\r\n *\r\n * All existing promise libraries are supported. The ones with recognizable signature are used automatically,\r\n * while the rest can be configured via the $[Promise Adapter].\r\n *\r\n * This is a static option (can only be set prior to initialization).\r\n *\r\n * @param {boolean} [options.noLocking=false]\r\n * Prevents protocol locking.\r\n *\r\n * By default, the library locks much of its protocol to read-only access, as a fool-proof mechanism.\r\n * Specifically for the {@link event:extend extend} event this serves as a protection against overriding existing\r\n * properties or trying to set them at the wrong time.\r\n *\r\n * If this provision gets in the way of using a mock-up framework for your tests, you can force\r\n * the library to deactivate most of the locks by setting `noLocking` = `true` within the options.\r\n *\r\n * This option is dynamic (can be set before or after initialization). However, changing it after the library's\r\n * initialization will not affect {@link Database} objects that have already been created.\r\n *\r\n * @param {boolean} [options.capSQL=false]\r\n * Capitalizes any SQL generated by the library.\r\n *\r\n * By default, all internal SQL within the library is generated using the low case.\r\n * If, however, you want all SQL to be capitalized instead, set `capSQL` = `true`.\r\n *\r\n * It is purely a cosmetic feature.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {string|Array<string>|null|undefined|function} [options.schema]\r\n * Forces change of the default database schema(s) for every fresh connection, i.e.\r\n * the library will execute `SET search_path TO schema_1, schema_2, ...` in the background\r\n * whenever a fresh physical connection is allocated.\r\n *\r\n * Normally, one changes the default schema(s) by $[changing the database or the role], but sometimes you\r\n * may want to switch the default schema(s) without persisting the change, and then use this option.\r\n *\r\n * It can be a string, an array of strings, or a callback function that takes `dc` (database context)\r\n * as the only parameter (and as `this`), and returns schema(s) according to the database context. A callback function\r\n * can also return nothing (`undefined` or `null`), if no schema change needed for the specified database context.\r\n *\r\n * The order of schema names matters, so if a table name exists in more than one schema, its default access resolves\r\n * to the table from the first such schema on the list.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {boolean} [options.noWarnings=false]\r\n * Disables all diagnostic warnings in the library (it is ill-advised).\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.connect]\r\n * Global event {@link event:connect connect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.disconnect]\r\n * Global event {@link event:disconnect disconnect} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.query]\r\n * Global event {@link event:query query} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.receive]\r\n * Global event {@link event:receive receive} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.task]\r\n * Global event {@link event:task task} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.transact]\r\n * Global event {@link event:transact transact} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.error]\r\n * Global event {@link event:error error} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @param {function} [options.extend]\r\n * Global event {@link event:extend extend} handler.\r\n *\r\n * This option is dynamic (can be set before or after initialization).\r\n *\r\n * @see\r\n * {@link module:pg-promise~end end},\r\n * {@link module:pg-promise~as as},\r\n * {@link module:pg-promise~errors errors},\r\n * {@link module:pg-promise~helpers helpers},\r\n * {@link module:pg-promise~minify minify},\r\n * {@link module:pg-promise~ParameterizedQuery ParameterizedQuery},\r\n * {@link module:pg-promise~PreparedStatement PreparedStatement},\r\n * {@link module:pg-promise~pg pg},\r\n * {@link module:pg-promise~QueryFile QueryFile},\r\n * {@link module:pg-promise~queryResult queryResult},\r\n * {@link module:pg-promise~spex spex},\r\n * {@link module:pg-promise~txMode txMode},\r\n * {@link module:pg-promise~utils utils}\r\n *\r\n */\r\nfunction $main(options) {\r\n\r\n    options = assertOptions(options, [`pgFormatting`, `pgNative`, `promiseLib`, `noLocking`, `capSQL`, `noWarnings`,\r\n        `connect`, `disconnect`, `query`, `receive`, `task`, `transact`, `error`, `extend`, `schema`]);\r\n\r\n    let pg = npm.pg;\r\n    const p = parsePromise(options.promiseLib);\r\n\r\n    const config = {\r\n        version: npm.package.version,\r\n        promiseLib: p.promiseLib,\r\n        promise: p.promise\r\n    };\r\n\r\n    npm.utils.addReadProp(config, `$npm`, {}, true);\r\n\r\n    // Locking properties that cannot be changed later:\r\n    npm.utils.addReadProp(options, `promiseLib`, options.promiseLib);\r\n    npm.utils.addReadProp(options, `pgNative`, !!options.pgNative);\r\n\r\n    config.options = options;\r\n\r\n    // istanbul ignore next:\r\n    // we do not cover code specific to Native Bindings\r\n    if (options.pgNative) {\r\n        pg = npm.pg.native;\r\n        if (npm.utils.isNull(pg)) {\r\n            throw new Error(npm.text.nativeError);\r\n        }\r\n    } else {\r\n        if (!originalClientConnect) {\r\n            originalClientConnect = pg.Client.prototype.connect;\r\n            pg.Client.prototype.connect = function () {\r\n                const handler = msg => {\r\n                    if (msg.parameterName === `server_version`) {\r\n                        this.serverVersion = msg.parameterValue;\r\n                        this.connection.removeListener(`parameterStatus`, handler);\r\n                    }\r\n                };\r\n                this.connection.on(`parameterStatus`, handler);\r\n                originalClientConnect.call(this, ...arguments);\r\n            };\r\n        }\r\n    }\r\n\r\n    const Database = require(`./database`)(config);\r\n\r\n    const inst = (cn, dc) => {\r\n        if (npm.utils.isText(cn) || (cn && typeof cn === `object`)) {\r\n            return new Database(cn, dc, config);\r\n        }\r\n        throw new TypeError(`Invalid connection details: ` + npm.utils.toJson(cn));\r\n    };\r\n\r\n    npm.utils.addReadProperties(inst, rootNameSpace);\r\n\r\n    /**\r\n     * @member {external:PG} pg\r\n     * @readonly\r\n     * @description\r\n     * Instance of the $[pg] library that's being used, depending on initialization option `pgNative`:\r\n     *  - regular `pg` module instance, without option `pgNative`, or equal to `false` (default)\r\n     *  - `pg` module instance with $[Native Bindings], if option `pgNative` was set.\r\n     *\r\n     * Available as `pgp.pg`, after initializing the library.\r\n     */\r\n    npm.utils.addReadProp(inst, `pg`, pg);\r\n\r\n    /**\r\n     * @member {function} end\r\n     * @readonly\r\n     * @description\r\n     * Shuts down all connection pools created in the process, so it can terminate without delay.\r\n     * It is available as `pgp.end`, after initializing the library.\r\n     *\r\n     * All {@link Database} objects created previously can no longer be used, and their query methods will be rejecting\r\n     * with {@link external:Error Error} = `Connection pool of the database object has been destroyed.`\r\n     *\r\n     * And if you want to shut down only a specific connection pool, you do so via the {@link Database}\r\n     * object that owns the pool: `db.$pool.end()` (see {@link Database#$pool Database.$pool}).\r\n     *\r\n     * For more details see $[Library de-initialization].\r\n     */\r\n    npm.utils.addReadProp(inst, `end`, () => {\r\n        DatabasePool.shutDown();\r\n    });\r\n\r\n    /**\r\n     * @member {helpers} helpers\r\n     * @readonly\r\n     * @description\r\n     * Namespace for {@link helpers all query-formatting helper functions}.\r\n     *\r\n     * Available as `pgp.helpers`, after initializing the library.\r\n     *\r\n     * @see {@link helpers}.\r\n     */\r\n    npm.utils.addReadProp(inst, `helpers`, npm.helpers(config));\r\n\r\n    /**\r\n     * @member {external:spex} spex\r\n     * @readonly\r\n     * @description\r\n     * Initialized instance of the $[spex] module, used by the library within tasks and transactions.\r\n     *\r\n     * Available as `pgp.spex`, after initializing the library.\r\n     *\r\n     * @see\r\n     * {@link Task#batch},\r\n     * {@link Task#page},\r\n     * {@link Task#sequence}\r\n     */\r\n    npm.utils.addReadProp(inst, `spex`, config.$npm.spex);\r\n\r\n    config.pgp = inst;\r\n    npm.utils.lock(config, true, options);\r\n\r\n    return inst;\r\n}\r\n\r\nconst rootNameSpace = {\r\n\r\n    /**\r\n     * @member {formatting} as\r\n     * @readonly\r\n     * @description\r\n     * Namespace for {@link formatting all query-formatting functions}.\r\n     *\r\n     * Available as `pgp.as`, before and after initializing the library.\r\n     *\r\n     * @see {@link formatting}.\r\n     */\r\n    as: npm.formatting.as,\r\n\r\n    /**\r\n     * @member {external:pg-minify} minify\r\n     * @readonly\r\n     * @description\r\n     * Instance of the $[pg-minify] library used internally to minify SQL scripts.\r\n     *\r\n     * Available as `pgp.minify`, before and after initializing the library.\r\n     */\r\n    minify: npm.minify,\r\n\r\n    /**\r\n     * @member {queryResult} queryResult\r\n     * @readonly\r\n     * @description\r\n     * Query Result Mask enumerator.\r\n     *\r\n     * Available as `pgp.queryResult`, before and after initializing the library.\r\n     */\r\n    queryResult,\r\n\r\n    /**\r\n     * @member {PromiseAdapter} PromiseAdapter\r\n     * @readonly\r\n     * @description\r\n     * {@link PromiseAdapter} class.\r\n     *\r\n     * Available as `pgp.PromiseAdapter`, before and after initializing the library.\r\n     */\r\n    PromiseAdapter,\r\n\r\n    /**\r\n     * @member {ParameterizedQuery} ParameterizedQuery\r\n     * @readonly\r\n     * @description\r\n     * {@link ParameterizedQuery} class.\r\n     *\r\n     * Available as `pgp.ParameterizedQuery`, before and after initializing the library.\r\n     */\r\n    ParameterizedQuery,\r\n\r\n    /**\r\n     * @member {PreparedStatement} PreparedStatement\r\n     * @readonly\r\n     * @description\r\n     * {@link PreparedStatement} class.\r\n     *\r\n     * Available as `pgp.PreparedStatement`, before and after initializing the library.\r\n     */\r\n    PreparedStatement,\r\n\r\n    /**\r\n     * @member {QueryFile} QueryFile\r\n     * @readonly\r\n     * @description\r\n     * {@link QueryFile} class.\r\n     *\r\n     * Available as `pgp.QueryFile`, before and after initializing the library.\r\n     */\r\n    QueryFile,\r\n\r\n    /**\r\n     * @member {errors} errors\r\n     * @readonly\r\n     * @description\r\n     * {@link errors} - namespace for all error types.\r\n     *\r\n     * Available as `pgp.errors`, before and after initializing the library.\r\n     */\r\n    errors: npm.errors,\r\n\r\n    /**\r\n     * @member {utils} utils\r\n     * @readonly\r\n     * @description\r\n     * {@link utils} - namespace for utility functions.\r\n     *\r\n     * Available as `pgp.utils`, before and after initializing the library.\r\n     */\r\n    utils: npm.pubUtils,\r\n\r\n    /**\r\n     * @member {txMode} txMode\r\n     * @readonly\r\n     * @description\r\n     * {@link txMode Transaction Mode} namespace.\r\n     *\r\n     * Available as `pgp.txMode`, before and after initializing the library.\r\n     */\r\n    txMode: npm.mode\r\n};\r\n\r\nnpm.utils.addReadProperties($main, rootNameSpace);\r\n\r\nmodule.exports = $main;\r\n\r\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\r\n\r\n/**\r\n * @external PG\r\n * @see https://node-postgres.com\r\n */\r\n\r\n/**\r\n * @external Client\r\n * @see https://node-postgres.com/api/client\r\n */\r\n\r\n/**\r\n * @external pg-minify\r\n * @see https://github.com/vitaly-t/pg-minify\r\n */\r\n\r\n/**\r\n * @external spex\r\n * @see https://github.com/vitaly-t/spex\r\n */\r\n"]},"metadata":{},"sourceType":"script"}