{"ast":null,"code":"const EOL = require('os').EOL;\n\nconst utils = require('./utils');\n\nconst parsingErrorCode = {\n  unclosedMLC: 0,\n  // Unclosed multi-line comment.\n  unclosedText: 1,\n  // Unclosed text block.\n  unclosedQI: 2,\n  // Unclosed quoted identifier.\n  multiLineQI: 3 // Multi-line quoted identifiers are not supported.\n\n};\nObject.freeze(parsingErrorCode);\nconst errorMessages = [{\n  name: 'unclosedMLC',\n  message: 'Unclosed multi-line comment.'\n}, {\n  name: 'unclosedText',\n  message: 'Unclosed text block.'\n}, {\n  name: 'unclosedQI',\n  message: 'Unclosed quoted identifier.'\n}, {\n  name: 'multiLineQI',\n  message: 'Multi-line quoted identifiers are not supported.'\n}];\n\nclass SQLParsingError extends Error {\n  constructor(code, position) {\n    const err = errorMessages[code].message;\n    const message = 'Error parsing SQL at {line:' + position.line + ',col:' + position.column + '}: ' + err;\n    super(message);\n    this.name = this.constructor.name;\n    this.error = err;\n    this.code = code;\n    this.position = position;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nSQLParsingError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap = utils.messageGap(level + 1);\n  const lines = ['SQLParsingError {', gap + 'code: parsingErrorCode.' + errorMessages[this.code].name, gap + 'error: \"' + this.error + '\"', gap + 'position: {line: ' + this.position.line + ', col: ' + this.position.column + '}', utils.messageGap(level) + '}'];\n  return lines.join(EOL);\n};\n\nutils.addInspection(SQLParsingError.prototype, function () {\n  return this.toString();\n});\nmodule.exports = {\n  SQLParsingError,\n  parsingErrorCode\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-minify/lib/error.js"],"names":["EOL","require","utils","parsingErrorCode","unclosedMLC","unclosedText","unclosedQI","multiLineQI","Object","freeze","errorMessages","name","message","SQLParsingError","Error","constructor","code","position","err","line","column","error","captureStackTrace","prototype","toString","level","parseInt","gap","messageGap","lines","join","addInspection","module","exports"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,IAAD,CAAP,CAAcD,GAA1B;;AACA,MAAME,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAME,gBAAgB,GAAG;AACrBC,EAAAA,WAAW,EAAE,CADQ;AACL;AAChBC,EAAAA,YAAY,EAAE,CAFO;AAEJ;AACjBC,EAAAA,UAAU,EAAE,CAHS;AAGN;AACfC,EAAAA,WAAW,EAAE,CAJQ,CAIN;;AAJM,CAAzB;AAOAC,MAAM,CAACC,MAAP,CAAcN,gBAAd;AAEA,MAAMO,aAAa,GAAG,CAClB;AAACC,EAAAA,IAAI,EAAE,aAAP;AAAsBC,EAAAA,OAAO,EAAE;AAA/B,CADkB,EAElB;AAACD,EAAAA,IAAI,EAAE,cAAP;AAAuBC,EAAAA,OAAO,EAAE;AAAhC,CAFkB,EAGlB;AAACD,EAAAA,IAAI,EAAE,YAAP;AAAqBC,EAAAA,OAAO,EAAE;AAA9B,CAHkB,EAIlB;AAACD,EAAAA,IAAI,EAAE,aAAP;AAAsBC,EAAAA,OAAO,EAAE;AAA/B,CAJkB,CAAtB;;AAOA,MAAMC,eAAN,SAA8BC,KAA9B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACxB,UAAMC,GAAG,GAAGR,aAAa,CAACM,IAAD,CAAb,CAAoBJ,OAAhC;AACA,UAAMA,OAAO,GAAG,gCAAgCK,QAAQ,CAACE,IAAzC,GAAgD,OAAhD,GAA0DF,QAAQ,CAACG,MAAnE,GAA4E,KAA5E,GAAoFF,GAApG;AACA,UAAMN,OAAN;AACA,SAAKD,IAAL,GAAY,KAAKI,WAAL,CAAiBJ,IAA7B;AACA,SAAKU,KAAL,GAAaH,GAAb;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACAH,IAAAA,KAAK,CAACQ,iBAAN,CAAwB,IAAxB,EAA8B,KAAKP,WAAnC;AACH;;AAV+B;;AAapCF,eAAe,CAACU,SAAhB,CAA0BC,QAA1B,GAAqC,UAAUC,KAAV,EAAiB;AAClDA,EAAAA,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAYC,QAAQ,CAACD,KAAD,CAApB,GAA8B,CAAtC;AACA,QAAME,GAAG,GAAGzB,KAAK,CAAC0B,UAAN,CAAiBH,KAAK,GAAG,CAAzB,CAAZ;AACA,QAAMI,KAAK,GAAG,CACV,mBADU,EAEVF,GAAG,GAAG,yBAAN,GAAkCjB,aAAa,CAAC,KAAKM,IAAN,CAAb,CAAyBL,IAFjD,EAGVgB,GAAG,GAAG,UAAN,GAAmB,KAAKN,KAAxB,GAAgC,GAHtB,EAIVM,GAAG,GAAG,mBAAN,GAA4B,KAAKV,QAAL,CAAcE,IAA1C,GAAiD,SAAjD,GAA6D,KAAKF,QAAL,CAAcG,MAA3E,GAAoF,GAJ1E,EAKVlB,KAAK,CAAC0B,UAAN,CAAiBH,KAAjB,IAA0B,GALhB,CAAd;AAOA,SAAOI,KAAK,CAACC,IAAN,CAAW9B,GAAX,CAAP;AACH,CAXD;;AAaAE,KAAK,CAAC6B,aAAN,CAAoBlB,eAAe,CAACU,SAApC,EAA+C,YAAY;AACvD,SAAO,KAAKC,QAAL,EAAP;AACH,CAFD;AAIAQ,MAAM,CAACC,OAAP,GAAiB;AACbpB,EAAAA,eADa;AAEbV,EAAAA;AAFa,CAAjB","sourcesContent":["const EOL = require('os').EOL;\r\nconst utils = require('./utils');\r\n\r\nconst parsingErrorCode = {\r\n    unclosedMLC: 0, // Unclosed multi-line comment.\r\n    unclosedText: 1, // Unclosed text block.\r\n    unclosedQI: 2, // Unclosed quoted identifier.\r\n    multiLineQI: 3 // Multi-line quoted identifiers are not supported.\r\n};\r\n\r\nObject.freeze(parsingErrorCode);\r\n\r\nconst errorMessages = [\r\n    {name: 'unclosedMLC', message: 'Unclosed multi-line comment.'},\r\n    {name: 'unclosedText', message: 'Unclosed text block.'},\r\n    {name: 'unclosedQI', message: 'Unclosed quoted identifier.'},\r\n    {name: 'multiLineQI', message: 'Multi-line quoted identifiers are not supported.'}\r\n];\r\n\r\nclass SQLParsingError extends Error {\r\n    constructor(code, position) {\r\n        const err = errorMessages[code].message;\r\n        const message = 'Error parsing SQL at {line:' + position.line + ',col:' + position.column + '}: ' + err;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        this.error = err;\r\n        this.code = code;\r\n        this.position = position;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\nSQLParsingError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap = utils.messageGap(level + 1);\r\n    const lines = [\r\n        'SQLParsingError {',\r\n        gap + 'code: parsingErrorCode.' + errorMessages[this.code].name,\r\n        gap + 'error: \"' + this.error + '\"',\r\n        gap + 'position: {line: ' + this.position.line + ', col: ' + this.position.column + '}',\r\n        utils.messageGap(level) + '}'\r\n    ];\r\n    return lines.join(EOL);\r\n};\r\n\r\nutils.addInspection(SQLParsingError.prototype, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {\r\n    SQLParsingError,\r\n    parsingErrorCode\r\n};\r\n"]},"metadata":{},"sourceType":"script"}