{"ast":null,"code":"const npm = {\n  read: require('./read')\n};\n/**\r\n * @namespace stream\r\n * @description\r\n * Namespace with methods that implement stream operations, and {@link stream.read read} is the only method currently supported.\r\n *\r\n * **Synchronous Stream Processing**\r\n *\r\n * ```js\r\n * const stream = require('spex')(Promise).stream;\r\n * const fs = require('fs');\r\n *\r\n * const rs = fs.createReadStream('values.txt');\r\n *\r\n * function receiver(index, data, delay) {\r\n *    console.log('RECEIVED:', index, data, delay);\r\n * }\r\n *\r\n * stream.read(rs, receiver)\r\n *     .then(data => {\r\n *         console.log('DATA:', data);\r\n *     })\r\n *     .catch(error => {\r\n *         console.log('ERROR:', error);\r\n *     });\r\n * ```\r\n *\r\n * **Asynchronous Stream Processing**\r\n *\r\n * ```js\r\n * const stream = require('spex')(Promise).stream;\r\n * const fs = require('fs');\r\n *\r\n * const rs = fs.createReadStream('values.txt');\r\n *\r\n * function receiver(index, data, delay) {\r\n *    return new Promise(resolve => {\r\n *        console.log('RECEIVED:', index, data, delay);\r\n *        resolve();\r\n *    });\r\n * }\r\n *\r\n * stream.read(rs, receiver)\r\n *     .then(data => {\r\n *         console.log('DATA:', data);\r\n *     })\r\n *     .catch(error => {\r\n *         console.log('ERROR:', error);\r\n *    });\r\n * ```\r\n *\r\n * @property {function} stream.read\r\n * Consumes and processes data from a $[Readable] stream.\r\n *\r\n */\n\nmodule.exports = function (config) {\n  const res = {\n    read: npm.read(config)\n  };\n  Object.freeze(res);\n  return res;\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/spex/lib/ext/stream/index.js"],"names":["npm","read","require","module","exports","config","res","Object","freeze"],"mappings":"AAAA,MAAMA,GAAG,GAAG;AACRC,EAAAA,IAAI,EAAEC,OAAO,CAAC,QAAD;AADL,CAAZ;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkB;AAC/B,QAAMC,GAAG,GAAG;AACRL,IAAAA,IAAI,EAAED,GAAG,CAACC,IAAJ,CAASI,MAAT;AADE,GAAZ;AAGAE,EAAAA,MAAM,CAACC,MAAP,CAAcF,GAAd;AACA,SAAOA,GAAP;AACH,CAND","sourcesContent":["const npm = {\r\n    read: require('./read')\r\n};\r\n\r\n/**\r\n * @namespace stream\r\n * @description\r\n * Namespace with methods that implement stream operations, and {@link stream.read read} is the only method currently supported.\r\n *\r\n * **Synchronous Stream Processing**\r\n *\r\n * ```js\r\n * const stream = require('spex')(Promise).stream;\r\n * const fs = require('fs');\r\n *\r\n * const rs = fs.createReadStream('values.txt');\r\n *\r\n * function receiver(index, data, delay) {\r\n *    console.log('RECEIVED:', index, data, delay);\r\n * }\r\n *\r\n * stream.read(rs, receiver)\r\n *     .then(data => {\r\n *         console.log('DATA:', data);\r\n *     })\r\n *     .catch(error => {\r\n *         console.log('ERROR:', error);\r\n *     });\r\n * ```\r\n *\r\n * **Asynchronous Stream Processing**\r\n *\r\n * ```js\r\n * const stream = require('spex')(Promise).stream;\r\n * const fs = require('fs');\r\n *\r\n * const rs = fs.createReadStream('values.txt');\r\n *\r\n * function receiver(index, data, delay) {\r\n *    return new Promise(resolve => {\r\n *        console.log('RECEIVED:', index, data, delay);\r\n *        resolve();\r\n *    });\r\n * }\r\n *\r\n * stream.read(rs, receiver)\r\n *     .then(data => {\r\n *         console.log('DATA:', data);\r\n *     })\r\n *     .catch(error => {\r\n *         console.log('ERROR:', error);\r\n *    });\r\n * ```\r\n *\r\n * @property {function} stream.read\r\n * Consumes and processes data from a $[Readable] stream.\r\n *\r\n */\r\nmodule.exports = function (config) {\r\n    const res = {\r\n        read: npm.read(config)\r\n    };\r\n    Object.freeze(res);\r\n    return res;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}