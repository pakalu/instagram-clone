{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  assertOptions\n} = require(`assert-options`);\n/**\r\n * @class PromiseAdapter\r\n * @summary Adapter for the primary promise operations.\r\n * @description\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *  - resolve an array of promises\r\n *\r\n * The type is available from the library's root: `pgp.PromiseAdapter`.\r\n *\r\n * @param {object} api\r\n * Promise API configuration object.\r\n *\r\n * Passing in anything other than an object will throw {@link external:TypeError TypeError} = `Adapter requires an api configuration object.`\r\n *\r\n * @param {function} api.create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'create' must be specified.`\r\n *\r\n * @param {function} api.resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'resolve' must be specified.`\r\n *\r\n * @param {function} api.reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'reject' must be specified.`\r\n *\r\n * @param {function} api.all\r\n * A function that resolves an array of promises.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'all' must be specified.`\r\n *\r\n * @returns {PromiseAdapter}\r\n */\n\n\nclass PromiseAdapter {\n  constructor(api) {\n    if (!api || typeof api !== `object`) {\n      throw new TypeError(`Adapter requires an api configuration object.`);\n    }\n\n    api = assertOptions(api, [`create`, `resolve`, `reject`, `all`]);\n    this.create = api.create;\n    this.resolve = api.resolve;\n    this.reject = api.reject;\n    this.all = api.all;\n\n    if (typeof this.create !== `function`) {\n      throw new TypeError(`Function 'create' must be specified.`);\n    }\n\n    if (typeof this.resolve !== `function`) {\n      throw new TypeError(`Function 'resolve' must be specified.`);\n    }\n\n    if (typeof this.reject !== `function`) {\n      throw new TypeError(`Function 'reject' must be specified.`);\n    }\n\n    if (typeof this.all !== `function`) {\n      throw new TypeError(`Function 'all' must be specified.`);\n    }\n  }\n\n}\n\nmodule.exports = {\n  PromiseAdapter\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/promise-adapter.js"],"names":["assertOptions","require","PromiseAdapter","constructor","api","TypeError","create","resolve","reject","all","module","exports"],"mappings":"AAAA;;;;;;;;AASA,MAAM;AAACA,EAAAA;AAAD,IAAkBC,OAAO,CAAE,gBAAF,CAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AAEb,QAAI,CAACA,GAAD,IAAQ,OAAOA,GAAP,KAAgB,QAA5B,EAAqC;AACjC,YAAM,IAAIC,SAAJ,CAAe,+CAAf,CAAN;AACH;;AAEDD,IAAAA,GAAG,GAAGJ,aAAa,CAACI,GAAD,EAAM,CAAE,QAAF,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,KAAjC,CAAN,CAAnB;AAEA,SAAKE,MAAL,GAAcF,GAAG,CAACE,MAAlB;AACA,SAAKC,OAAL,GAAeH,GAAG,CAACG,OAAnB;AACA,SAAKC,MAAL,GAAcJ,GAAG,CAACI,MAAlB;AACA,SAAKC,GAAL,GAAWL,GAAG,CAACK,GAAf;;AAEA,QAAI,OAAO,KAAKH,MAAZ,KAAwB,UAA5B,EAAuC;AACnC,YAAM,IAAID,SAAJ,CAAe,sCAAf,CAAN;AACH;;AAED,QAAI,OAAO,KAAKE,OAAZ,KAAyB,UAA7B,EAAwC;AACpC,YAAM,IAAIF,SAAJ,CAAe,uCAAf,CAAN;AACH;;AAED,QAAI,OAAO,KAAKG,MAAZ,KAAwB,UAA5B,EAAuC;AACnC,YAAM,IAAIH,SAAJ,CAAe,sCAAf,CAAN;AACH;;AAED,QAAI,OAAO,KAAKI,GAAZ,KAAqB,UAAzB,EAAoC;AAChC,YAAM,IAAIJ,SAAJ,CAAe,mCAAf,CAAN;AACH;AACJ;;AA7BgB;;AAgCrBK,MAAM,CAACC,OAAP,GAAiB;AAACT,EAAAA;AAAD,CAAjB","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {assertOptions} = require(`assert-options`);\r\n\r\n/**\r\n * @class PromiseAdapter\r\n * @summary Adapter for the primary promise operations.\r\n * @description\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *  - resolve an array of promises\r\n *\r\n * The type is available from the library's root: `pgp.PromiseAdapter`.\r\n *\r\n * @param {object} api\r\n * Promise API configuration object.\r\n *\r\n * Passing in anything other than an object will throw {@link external:TypeError TypeError} = `Adapter requires an api configuration object.`\r\n *\r\n * @param {function} api.create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'create' must be specified.`\r\n *\r\n * @param {function} api.resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'resolve' must be specified.`\r\n *\r\n * @param {function} api.reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'reject' must be specified.`\r\n *\r\n * @param {function} api.all\r\n * A function that resolves an array of promises.\r\n *\r\n * Passing in anything other than a function will throw {@link external:TypeError TypeError} = `Function 'all' must be specified.`\r\n *\r\n * @returns {PromiseAdapter}\r\n */\r\nclass PromiseAdapter {\r\n    constructor(api) {\r\n\r\n        if (!api || typeof api !== `object`) {\r\n            throw new TypeError(`Adapter requires an api configuration object.`);\r\n        }\r\n\r\n        api = assertOptions(api, [`create`, `resolve`, `reject`, `all`]);\r\n\r\n        this.create = api.create;\r\n        this.resolve = api.resolve;\r\n        this.reject = api.reject;\r\n        this.all = api.all;\r\n\r\n        if (typeof this.create !== `function`) {\r\n            throw new TypeError(`Function 'create' must be specified.`);\r\n        }\r\n\r\n        if (typeof this.resolve !== `function`) {\r\n            throw new TypeError(`Function 'resolve' must be specified.`);\r\n        }\r\n\r\n        if (typeof this.reject !== `function`) {\r\n            throw new TypeError(`Function 'reject' must be specified.`);\r\n        }\r\n\r\n        if (typeof this.all !== `function`) {\r\n            throw new TypeError(`Function 'all' must be specified.`);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {PromiseAdapter};\r\n"]},"metadata":{},"sourceType":"script"}