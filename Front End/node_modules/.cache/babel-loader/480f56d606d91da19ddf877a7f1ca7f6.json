{"ast":null,"code":"const npm = {\n  stat: require('./static')\n};\n\nmodule.exports = function ($p) {\n  const exp = {\n    formatError: npm.stat.formatError,\n    isPromise: npm.stat.isPromise,\n    isReadableStream: npm.stat.isReadableStream,\n    messageGap: npm.stat.messageGap,\n    extend: npm.stat.extend,\n    resolve: resolve,\n    wrap: wrap\n  };\n  return exp; //////////////////////////////////////////\n  // Checks if the function is a generator,\n  // and if so - wraps it up into a promise;\n\n  function wrap(func) {\n    if (typeof func === 'function') {\n      if (func.constructor.name === 'GeneratorFunction') {\n        return asyncAdapter(func);\n      }\n\n      return func;\n    }\n\n    return null;\n  } /////////////////////////////////////////////////////\n  // Resolves a mixed value into the actual value,\n  // consistent with the way mixed values are defined:\n  // https://github.com/vitaly-t/spex/wiki/Mixed-Values\n\n\n  function resolve(value, params, onSuccess, onError) {\n    const self = this;\n    let delayed = false;\n\n    function loop() {\n      while (typeof value === 'function') {\n        if (value.constructor.name === 'GeneratorFunction') {\n          value = asyncAdapter(value);\n        }\n\n        try {\n          value = params ? value.apply(self, params) : value.call(self);\n        } catch (e) {\n          onError(e, false); // false means 'threw an error'\n\n          return;\n        }\n      }\n\n      if (exp.isPromise(value)) {\n        value.then(data => {\n          delayed = true;\n          value = data;\n          loop();\n          return null; // this dummy return is just to prevent Bluebird warnings;\n        }).catch(error => {\n          onError(error, true); // true means 'rejected'\n        });\n      } else {\n        onSuccess(value, delayed);\n      }\n    }\n\n    loop();\n  } // Generator-to-Promise adapter;\n  // Based on: https://www.promisejs.org/generators/#both\n\n\n  function asyncAdapter(generator) {\n    return function () {\n      const g = generator.apply(this, arguments);\n\n      function handle(result) {\n        if (result.done) {\n          return $p.resolve(result.value);\n        }\n\n        return $p.resolve(result.value).then(res => {\n          return handle(g.next(res));\n        }, err => {\n          return handle(g.throw(err));\n        });\n      }\n\n      return handle(g.next());\n    };\n  }\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/spex/lib/utils/index.js"],"names":["npm","stat","require","module","exports","$p","exp","formatError","isPromise","isReadableStream","messageGap","extend","resolve","wrap","func","constructor","name","asyncAdapter","value","params","onSuccess","onError","self","delayed","loop","apply","call","e","then","data","catch","error","generator","g","arguments","handle","result","done","res","next","err","throw"],"mappings":"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","sourcesContent":["const npm = {\r\n    stat: require('./static')\r\n};\r\n\r\nmodule.exports = function ($p) {\r\n\r\n    const exp = {\r\n        formatError: npm.stat.formatError,\r\n        isPromise: npm.stat.isPromise,\r\n        isReadableStream: npm.stat.isReadableStream,\r\n        messageGap: npm.stat.messageGap,\r\n        extend: npm.stat.extend,\r\n        resolve: resolve,\r\n        wrap: wrap\r\n    };\r\n\r\n    return exp;\r\n\r\n    //////////////////////////////////////////\r\n    // Checks if the function is a generator,\r\n    // and if so - wraps it up into a promise;\r\n    function wrap(func) {\r\n        if (typeof func === 'function') {\r\n            if (func.constructor.name === 'GeneratorFunction') {\r\n                return asyncAdapter(func);\r\n            }\r\n            return func;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////\r\n    // Resolves a mixed value into the actual value,\r\n    // consistent with the way mixed values are defined:\r\n    // https://github.com/vitaly-t/spex/wiki/Mixed-Values\r\n    function resolve(value, params, onSuccess, onError) {\r\n\r\n        const self = this;\r\n        let delayed = false;\r\n\r\n        function loop() {\r\n            while (typeof value === 'function') {\r\n                if (value.constructor.name === 'GeneratorFunction') {\r\n                    value = asyncAdapter(value);\r\n                }\r\n                try {\r\n                    value = params ? value.apply(self, params) : value.call(self);\r\n                } catch (e) {\r\n                    onError(e, false); // false means 'threw an error'\r\n                    return;\r\n                }\r\n            }\r\n            if (exp.isPromise(value)) {\r\n                value\r\n                    .then(data => {\r\n                        delayed = true;\r\n                        value = data;\r\n                        loop();\r\n                        return null; // this dummy return is just to prevent Bluebird warnings;\r\n                    })\r\n                    .catch(error => {\r\n                        onError(error, true); // true means 'rejected'\r\n                    });\r\n            } else {\r\n                onSuccess(value, delayed);\r\n            }\r\n        }\r\n\r\n        loop();\r\n    }\r\n\r\n    // Generator-to-Promise adapter;\r\n    // Based on: https://www.promisejs.org/generators/#both\r\n    function asyncAdapter(generator) {\r\n        return function () {\r\n            const g = generator.apply(this, arguments);\r\n\r\n            function handle(result) {\r\n                if (result.done) {\r\n                    return $p.resolve(result.value);\r\n                }\r\n                return $p.resolve(result.value)\r\n                    .then(res => {\r\n                        return handle(g.next(res));\r\n                    }, err => {\r\n                        return handle(g.throw(err));\r\n                    });\r\n            }\r\n\r\n            return handle(g.next());\r\n        };\r\n    }\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"script"}