{"ast":null,"code":"const {\n  InnerState\n} = require(`../inner-state`);\n\nconst {\n  addInspection\n} = require(`../utils`);\n\nconst utils = require(`../utils`);\n/**\r\n * @private\r\n * @class ServerFormatting\r\n */\n\n\nclass ServerFormatting extends InnerState {\n  constructor(options) {\n    const _inner = {\n      options,\n      changed: true,\n      currentError: undefined,\n      target: {}\n    };\n    super(_inner);\n    setValues.call(this, options.values);\n  }\n\n  get error() {\n    return this._inner.currentError;\n  }\n\n  get text() {\n    return this._inner.options.text;\n  }\n\n  set text(value) {\n    const _i = this._inner;\n\n    if (value !== _i.options.text) {\n      _i.options.text = value;\n      _i.changed = true;\n    }\n  }\n\n  get binary() {\n    return this._inner.options.binary;\n  }\n\n  set binary(value) {\n    const _i = this._inner;\n\n    if (value !== _i.options.binary) {\n      _i.options.binary = value;\n      _i.changed = true;\n    }\n  }\n\n  get rowMode() {\n    return this._inner.options.rowMode;\n  }\n\n  set rowMode(value) {\n    const _i = this._inner;\n\n    if (value !== _i.options.rowMode) {\n      _i.options.rowMode = value;\n      _i.changed = true;\n    }\n  }\n\n  get values() {\n    return this._inner.target.values;\n  }\n\n  set values(values) {\n    setValues.call(this, values);\n  }\n\n}\n/**\r\n * @member ServerFormatting#parse\r\n */\n\n\nfunction setValues(v) {\n  const target = this._inner.target;\n\n  if (Array.isArray(v)) {\n    if (v.length) {\n      target.values = v;\n    } else {\n      delete target.values;\n    }\n  } else {\n    if (utils.isNull(v)) {\n      delete target.values;\n    } else {\n      target.values = [v];\n    }\n  }\n}\n\naddInspection(ServerFormatting, function () {\n  return this.toString();\n});\nmodule.exports = {\n  ServerFormatting\n};","map":{"version":3,"sources":["/Users/rafidhossain/Desktop/Instagram/instagram/Back End/node_modules/pg-promise/lib/types/server-formatting.js"],"names":["InnerState","require","addInspection","utils","ServerFormatting","constructor","options","_inner","changed","currentError","undefined","target","setValues","call","values","error","text","value","_i","binary","rowMode","v","Array","isArray","length","isNull","toString","module","exports"],"mappings":"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","sourcesContent":["const {InnerState} = require(`../inner-state`);\r\nconst {addInspection} = require(`../utils`);\r\nconst utils = require(`../utils`);\r\n\r\n/**\r\n * @private\r\n * @class ServerFormatting\r\n */\r\nclass ServerFormatting extends InnerState {\r\n\r\n    constructor(options) {\r\n        const _inner = {\r\n            options,\r\n            changed: true,\r\n            currentError: undefined,\r\n            target: {}\r\n        };\r\n        super(_inner);\r\n        setValues.call(this, options.values);\r\n    }\r\n\r\n    get error() {\r\n        return this._inner.currentError;\r\n    }\r\n\r\n    get text() {\r\n        return this._inner.options.text;\r\n    }\r\n\r\n    set text(value) {\r\n        const _i = this._inner;\r\n        if (value !== _i.options.text) {\r\n            _i.options.text = value;\r\n            _i.changed = true;\r\n        }\r\n    }\r\n\r\n    get binary() {\r\n        return this._inner.options.binary;\r\n    }\r\n\r\n    set binary(value) {\r\n        const _i = this._inner;\r\n        if (value !== _i.options.binary) {\r\n            _i.options.binary = value;\r\n            _i.changed = true;\r\n        }\r\n    }\r\n\r\n    get rowMode() {\r\n        return this._inner.options.rowMode;\r\n    }\r\n\r\n    set rowMode(value) {\r\n        const _i = this._inner;\r\n        if (value !== _i.options.rowMode) {\r\n            _i.options.rowMode = value;\r\n            _i.changed = true;\r\n        }\r\n    }\r\n\r\n    get values() {\r\n        return this._inner.target.values;\r\n    }\r\n\r\n    set values(values) {\r\n        setValues.call(this, values);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @member ServerFormatting#parse\r\n */\r\n\r\nfunction setValues(v) {\r\n    const target = this._inner.target;\r\n    if (Array.isArray(v)) {\r\n        if (v.length) {\r\n            target.values = v;\r\n        } else {\r\n            delete target.values;\r\n        }\r\n    } else {\r\n        if (utils.isNull(v)) {\r\n            delete target.values;\r\n        } else {\r\n            target.values = [v];\r\n        }\r\n    }\r\n}\r\n\r\naddInspection(ServerFormatting, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {ServerFormatting};\r\n"]},"metadata":{},"sourceType":"script"}